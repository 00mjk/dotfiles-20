# vim: set ft=bash:

# # -----------
# # --- GPG ---
# # -----------
#
# export GPG_TTY=$(tty)
# # This create-socketdir command is only required if a non default home
# # directory is used and the /run based sockets shall be used. For the default
# # home directory GnUPG creates a directory on the fly.
# if [[ ! -d $HOME/.gnupg && ( -d /run/user || -d /var/run/user ) ]]; then
#   gpgconf --create-socketdir
# fi

# --------------
# --- Golang ---
# --------------

export GOPATH="$HOME/go"
export PATH="$PATH:$GOPATH/bin"
export PATH="/usr/local/go/bin:$PATH"

# ---------------------
# --- Output stream ---
# ---------------------

# Prevent CTRL-S from suspending the output stream
stty stop '' -ixoff
# Prevent CTRL-Q from waking up the output stream
stty start '' -ixon

# ------------
# --- Tmux ---
# ------------

# Ensures the correct TERM value inside tmux.
# Requires to also set the following in tmux.conf:
#
#   # ~/.tmux.conf
#   set -g default-terminal "screen-256color"
#
if [[ -n "$TMUX" ]]; then
  export TERM=screen-256color
else
  export TERM=xterm-256color
fi

# update_auth_sock() {
#   SOCK="/tmp/ssh-agent-$USER-screen"
#
#   if test $SSH_AUTH_SOCK && [ $SSH_AUTH_SOCK != $SOCK ]
#   then
#     rm -f /tmp/ssh-agent-$USER-screen
#     ln -sf $SSH_AUTH_SOCK $SOCK
#     export SSH_AUTH_SOCK=$SOCK
#   fi
# }
#
# update_auth_sock()
#
# # ------------------------
# # --- Google Cloud SDK ---
# # ------------------------
#
# # The next line updates PATH for the Google Cloud SDK.
# if [[ -f $HOME/.google-cloud-sdk/path.bash.inc ]]; then
#   source $HOME/.google-cloud-sdk/path.bash.inc
# fi
#
# if [[ -f $HOME/google-cloud-sdk/path.bash.inc ]]; then
#   source $HOME/google-cloud-sdk/path.bash.inc
# fi
#
# # The next line enables bash completion for gcloud.
# if [[ -f $HOME/.google-cloud-sdk/completion.bash.inc ]]; then
#   source $HOME/.google-cloud-sdk/completion.bash.inc
# fi
#
# if [[ -f $HOME/google-cloud-sdk/completion.bash.inc ]]; then
#   source $HOME/google-cloud-sdk/completion.bash.inc
# fi
#
# # ----------------------------------- #
# # --- Kubernetes CLI autocomplete --- #
# # ----------------------------------- #
#
# # TODO: this is very slow, because `kubectl completion bash` is slow,
# #       replace with a file containing the output of the kubectl command
# if [[ -n "$(command -v kubectl)" ]]; then
#   source <(kubectl completion bash)
# fi
#
# # ----------------
# # --- Minikube ---
# # ----------------
#
# export MINIKUBE_WANTKUBECTLDOWNLOADMSG=false
# export MINIKUBE_WANTUPDATENOTIFICATION=false
# export MINIKUBE_WANTREPORTERRORPROMPT=false
# export MINIKUBE_HOME=$HOME
# export CHANGE_MINIKUBE_NONE_USER=true
#
# mkdir -p $HOME/.kube
# touch $HOME/.kube/config
#
# export KUBECONFIG=$HOME/.kube/config

# -------------
# --- rbenv ---
# -------------

export PATH="$HOME/.rbenv/bin:$PATH"
if [[ $(command -v rbenv) ]]; then
  eval "$(rbenv init -)"
fi

# -------------- #
# --- Editor --- #
# -------------- #

export EDITOR=$(command -v vim)
export VISUAL=$(command -v vim)

# ----------- #
# --- FZF --- #
# ----------- #

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPTS="
--extended
--history=$HOME/.fzf_history
--color=light
--reverse
--info=inline
--bind 'ctrl-/:toggle-preview'
--preview-window=:hidden
--preview='[ -f {} ] && head -n 200 {}'
"
[ -n "$(command -v fd)" ] && export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
[ -n "${FZF_DEFAULT_COMMAND}" ] && export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# --------------- #
# --- Aliases --- #
# --------------- #

# --- shell --- #

alias cls="clear && printf '\e[3J'"

# --- git --- #

alias gti='git'
alias g='git'
alias ga='git add'
alias gaa='git add $(git rev-parse --show-toplevel)'
alias gap='git add $(git rev-parse --show-toplevel) -p'
alias gb='git branch'
alias gba='git branch --all'
alias gci='git commit'
alias gcim='git commit -m'
alias gco='git checkout'
alias gcl='git checkout -' # "git checkout 'last'"
alias gd='git diff'
alias gds='git diff --staged'
alias gf='git fetch'
alias gp='git pull'
alias gpl='git pull'
alias gpp='git push origin HEAD -u'
alias gps='git push origin HEAD -u'
alias gs='git status'
alias gss='git status -sb'
alias gst='git status -sb'
alias gsm='git submodule update --init --recursive'
alias gsd='git diff --staged'

# --- ls --- #

alias ll='ls -lA'
alias la='ls -la'

# --- bundler --- #

alias be='bundle exec'

# --- docker --- #

alias dk='docker'
alias dc='docker-compose'
alias rmimages='docker rmi $(docker images -a -q)'
alias rmcontainers='docker rm $(docker ps -a -f status=exited -q)'
alias dkcont-nuke='docker ps -aq | xargs --no-run-if-empty docker stop | xargs --no-run-if-empty docker rm -v'
alias dkimg-nuke=$'docker ps --filter=status=exited --quiet  | xargs --no-run-if-empty docker rm && docker images --filter=dangling=true --quiet | xargs --no-run-if-empty docker rmi && docker volume ls --filter=dangling=true --quiet | awk \'$0 ~ "^[0-9a-f]{64}$"\' | xargs --no-run-if-empty docker volume rm'
alias rmkube='docker stop $(docker ps -q --filter name=k8s); docker rm $(docker ps -aq --filter name=k8s)'
