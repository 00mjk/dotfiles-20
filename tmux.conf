# vim: set ft=tmux:

# --------------------- #
# --- Tmux versions --- #
# --------------------- #

# Store current tmux version info in env vars for current tmux server instance,
# to support conditional settings.
run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)'
# this requires a version of `sort' that supports the `-V' option (sort by version numbers)
run-shell 'tmux setenv -g TMUX_GTE_2_1 $([ "${TMUX_VERSION}" = $(echo "${TMUX_VERSION}\n2.1" | sort -rV | head -n1) ] && echo 1)'
run-shell 'tmux setenv -g TMUX_GTE_2_2 $([ "${TMUX_VERSION}" = $(echo "${TMUX_VERSION}\n2.2" | sort -rV | head -n1) ] && echo 1)'
run-shell 'tmux setenv -g TMUX_GTE_2_4 $([ "${TMUX_VERSION}" = $(echo "${TMUX_VERSION}\n2.4" | sort -rV | head -n1) ] && echo 1)'
run-shell 'tmux setenv -g TMUX_GTE_2_7 $([ "${TMUX_VERSION}" = $(echo "${TMUX_VERSION}\n2.7" | sort -rV | head -n1) ] && echo 1)'

# --------------------------- #
# --- Server and sessions --- #
# --------------------------- #

# Ensure that running commands are not inadvertently terminated.
set -g exit-unattached off # the server will not exit when there are no attached clients
set -g destroy-unattached off # if the session is no longer attached to any clients, it will not be destroyed
if-shell '[ -n "${TMUX_GTE_2_7}" ]' \
  'set -g exit-empty off' # the server will not exit when there are no active sessions

# --------------- #
# --- Colours --- #
# --------------- #

set-window-option -g status-fg white
set-window-option -g status-bg green
set-window-option -g window-status-fg white
set-window-option -g window-status-bg green
set-window-option -g window-status-current-bg white
set-window-option -g window-status-current-bg blue

# ---------------------- #
# --- Responsiveness --- #
# ---------------------- #

# decrease command delay (increases vim responsiveness)
set -sg escape-time 1
# if using normal keybindings this will allow to start working sooner when
# switched to a pane; the default is 500 ms
set -g repeat-time 300

# ------------------ #
# --- Status bar --- #
# ------------------ #

# Window numbering

# number windows from 1
set-option -g base-index 1
# re-number windows when one is closed
set -g renumber-windows on

# Notify of activity

# highlight window when it has new activity
setw -g monitor-activity on

# setw -g window-status-format " #F#I:#W#F "
# setw -g window-status-current-format " #F#I:#W#F "

# ----------------------------- #
# --- New windows and panes --- #
# ----------------------------- #

# Intuitive splits (they don't override the defaults)
# the create new panes in the same directory, instead of the default one

bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# override the new-window shortcut to create a new window in the same directory
# as the current pane, instead of the default one
bind c new-window -c "#{pane_current_path}"

# ------------------------------- #
# --- Navigating tmux windows --- #
# ------------------------------- #

bind-key -n C-Space select-window -t :+ # cycle through windows
bind ^b last-window # toggle to last window like screen

# Output buffer (be able to scroll further back)

set -g history-limit 500000

# Select the windows (https://github.com/ygt-mikekchar/dotfiles/blob/e8348fc039e4b9c54ba952858a3ff0908b33ce83/home/.tmux.conf#L14)
# FIXME: This won't work for terminal emulators that bind M-number
#        I'm not sure if it's really a problem, because you still
#        have C-B number.
bind-key -n M-1 select-window -t :1
bind-key -n M-2 select-window -t :2
bind-key -n M-3 select-window -t :3
bind-key -n M-4 select-window -t :4
bind-key -n M-5 select-window -t :5
bind-key -n M-6 select-window -t :6
bind-key -n M-7 select-window -t :7
bind-key -n M-8 select-window -t :8
bind-key -n M-9 select-window -t :9

# ------------------------------ #
# --- Terminal compatibility --- #
# ------------------------------ #

# According to tmux docs the TERM environment variable must be set to `screen' or `tmux'
# for all programs running inside tmux. New windows will automatically have `TERM=screen' added to their
# environment, but care must be taken not to reset this in shell start-up files.
# This means having the following in the bash profile file:
#
#   # ~/.bashrc, ~/.bash_profile
# 	if [[ -n "$TMUX" ]]; then
# 	  export TERM=screen-256color
# 	else
# 	  export TERM=xterm-256color
# 	fi
#
# Adding `256color' will also enable 256-color colorschemes.
set -g default-terminal "screen-256color"
# Vim knows that xterm-like terminals support extended sequences for certain modified keys (eg: CMD+Up), but this does
# not work when using screen TERMs. Setting xterm-keys on allows the use of xterm key bindings in tmux so that the keys can
# be passed down to vim in xterm format.
set -g xterm-keys on

# -------------------------------------------- #
# --- Navigating tmux panes and vim splits --- #
# -------------------------------------------- #

# NOTE: due to a tmux bug that does not sent the M-key combos,
# this will not work in tmux 2.5. See https://github.com/tmux/tmux/issues/907#issuecomment-307691375
bind -n M-Up    if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-Up'    'select-pane -U'
bind -n M-Down  if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-Down'  'select-pane -D'
bind -n M-Left  if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-Left'  'select-pane -L'
bind -n M-Right if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-Right' 'select-pane -R'

bind -n M-k if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-k' 'select-pane -U'
bind -n M-j if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-j' 'select-pane -D'
bind -n M-h if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-h' 'select-pane -L'
bind -n M-l if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-l' 'select-pane -R'

# ------------- #
# --- Mouse --- #
# ------------- #

# mouse setup was changed in version 2.1, conflating all the options into one
if-shell '[ -n "${TMUX_GTE_2_1}" ]' \
  'set -g mouse on' \
  'set -g mode-mouse on; set -g mouse-resize-pane on; set -g mouse-select-pane on; set -g mouse-select-window on'

# ------------------------ #
# --- Vim key bindings --- #
# ------------------------ #

# this allows using vi-like movements when in copy mode, so that it's possible to
# copy-paste between panes and between the terminal and vim
set-window-option -g mode-keys vi

# keybinding syntax for specific modes was changed in version 2.4
if-shell '[ -n "${TMUX_GTE_2_4}" ]' \
  'bind -T copy-mode-vi v send -X begin-selection; bind -T copy-mode-vi r send -X rectangle-toggle; bind -T copy-mode-vi y send -X copy-selection' \
  'bind -t vi-copy v begin-selection; bind -t vi-copy r rectangle-toggle; bind -t vi-copy y copy-selection'

# in order to use prefix-p to paste, we need to override the "next buffer" binding,
# which we don't use often, see above the window navigation section
unbind p
bind p paste-buffer
# give 'v' to the user that still needs to go to the previous buffer
bind v previous-window

# Prevent the window jumping to the bottom when leaving copy-mode.
if-shell '[ -n "${TMUX_GTE_2_2}" && -z "${TMUX_GTE_2_4}" ]' \
  'bind-key -t vi-copy MouseDragEnd1Pane copy-selection -x'
if-shell '[ -n "${TMUX_GTE_2_4}" ]' \
  'bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-selection'
