# vim: set ft=tmux:

# ----------------------- #
# --- General options --- #
# ----------------------- #

set -g history-file ~/.tmux_history

# --------------------- #
# --- Tmux versions --- #
# --------------------- #

# Store current tmux version info in env vars for current tmux server instance,
# to support conditional settings.
#
# run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)'
# this requires a version of `sort' that supports the `-V' option (sort by version numbers)
# run-shell 'tmux setenv -g TMUX_GTE_2_9 $([ "${TMUX_VERSION}" = $(echo "${TMUX_VERSION}\n2.9" | sort -rV | head -n1) ] && echo 1)'

# --------------------------- #
# --- Server and sessions --- #
# --------------------------- #

# do not show previews when switching sessions and windows, because it messes
# with other attached clients
bind-key s choose-tree -ZsN
bind-key w choose-tree -ZwN

# --------------- #
# --- Colours --- #
# --------------- #

# Only support tmux >= 2.9, previous versions will have the default colours.

# --- highlight --- #
# black on dark white
set -g mode-style "bg=colour7 fg=colour0"

# --- tmux command prompt --- #
# black on dark white
set -g message-style "bg=colour7 fg=colour0"
set -g message-command-style "bg=colour7 fg=colour0"

# ---------------------- #
# --- Responsiveness --- #
# ---------------------- #

# decrease command delay (increases vim responsiveness)
set -sg escape-time 1
# if using normal keybindings this will allow to start working sooner when
# switched to a pane; the default is 500 ms
set -g repeat-time 300

# ------------------ #
# --- Statusline --- #
# ------------------ #

# Unfortunately the "right one quarter block" isn't currently (Feb 2021)
# included in standard fonts, otherwise it would have provided better
# separators.
#
# Other useful symbols: リ⎇ ⎪ , plus <https://en.wikipedia.org/wiki/Block_Elements>.

set -g status-style "bg=colour8 fg=colour15" # white on grey
set -g window-status-separator ''
set -wg window-status-activity-style "bg=colour11 fg=colour8" # gray on bright yellow
set -wg window-status-bell-style "bg=colour1 fg=colour15" # white on dark red
set -g base-index 1 # number windows from 1
set -g renumber-windows on # re-number windows when one is closed
setw -g monitor-activity on # highlight window when it has new activity
set -g status-interval 1
set -wg window-status-current-format " ❯ #I:#W#{?window_flags,#{window_flags}, } ▐"
set -wg window-status-current-style "bg=colour2 fg=colour15" # white on dark green
set -wg window-status-format "  #I:#W#{?window_flags,#{window_flags}, } ▐"
set -g status-right-length 140
set -g status-left "[#S]▐"
# For the hostname on macOS, it changes depending on the network, so we try to
# use ComputerName if possible.
# TODO: split tmux statusline definition
set -g status-right '#[bg=colour5]▌ #{?window_bigger,[#{window_offset_x}#,#{window_offset_y}] ,}#(if [[ "$OSTYPE" = darwin* && -n $(scutil --get ComputerName 2>/dev/null) ]]; then scutil --get ComputerName 2>/dev/null; else hostname | sed "s|\..*||"; fi)  #[bg=colour4]▌ #(echo "#{pane_current_path}" | sed "s|^$HOME|~|" | sed "s|/private/|/|")  #[bg=colour2]#(cd #{pane_current_path}; branch=$(git branch --show-current 2>/dev/null); [[ -n "${branch}" ]] && echo "▌ ⎇  $(git branch --show-current)  ")'

# -------------- #
# --- Search --- #
# -------------- #

# Prefix + / to search <https://github.com/sbernheim4/dotfiles/blob/9737f09c/tmux/.tmux.conf#L57>
bind-key / copy-mode \; send-key ?

# ----------------------------- #
# --- New windows and panes --- #
# ----------------------------- #

# Intuitive splits (they don't override the defaults)
# the create new panes in the same directory, instead of the default one

bind '|' split-window -h -c "#{pane_current_path}"
bind '\' split-window -h -c "#{pane_current_path}"
bind '-' split-window -v -c "#{pane_current_path}"

# override the new-window shortcut to create a new window in the same directory
# as the current pane, instead of the default one
bind c new-window -c "#{pane_current_path}"

# ------------------------------- #
# --- Navigating tmux windows --- #
# ------------------------------- #

bind-key -n C-Space select-window -t :+ # cycle through windows
bind ^b last-window # toggle to last window like screen, pressing Ctrl+bb

# Output buffer (be able to scroll further back)

set -g history-limit 500000

# Select the windows (https://github.com/ygt-mikekchar/dotfiles/blob/e8348fc039e4b9c54ba952858a3ff0908b33ce83/home/.tmux.conf#L14)
# FIXME: This won't work for terminal emulators that bind M-number
#        I'm not sure if it's really a problem, because you still
#        have C-B number.
bind-key -n M-1 select-window -t :1
bind-key -n M-2 select-window -t :2
bind-key -n M-3 select-window -t :3
bind-key -n M-4 select-window -t :4
bind-key -n M-5 select-window -t :5
bind-key -n M-6 select-window -t :6
bind-key -n M-7 select-window -t :7
bind-key -n M-8 select-window -t :8
bind-key -n M-9 select-window -t :9

# ------------------------------ #
# --- Terminal compatibility --- #
# ------------------------------ #

# tmux requires TERM to be either "screen[...]" or "tmux[...]".
#
# Setting it to tmux-256color will provide better compatibility for text
# rendering (including italics) and keycode reporting (for native key combos in
# many TUIs including Vim).
#
# You must compile the two files "tmux.terminfo" and "tmux-256color.terminfo"
# with "tic" for this to work.
#
set-option default-terminal "tmux-256color"

# set -as terminal-overrides ",xterm*:Tc:smcup@:rmcup@"

# Vim knows that xterm-like terminals support extended sequences for certain
# modified keys (eg: CMD+Up), but this does not work when using screen TERMs.
# Setting xterm-keys on allows the use of xterm key bindings in tmux so that
# the keys can be passed down to vim in xterm format.
set -g xterm-keys on

# -------------------------------------------- #
# --- Navigating tmux panes and vim splits --- #
# -------------------------------------------- #

bind -n M-Up    if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-Up'    'select-pane -U'
bind -n M-Down  if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-Down'  'select-pane -D'
bind -n M-Left  if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-Left'  'select-pane -L'
bind -n M-Right if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-Right' 'select-pane -R'

bind -n M-k if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-k' 'select-pane -U'
bind -n M-j if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-j' 'select-pane -D'
bind -n M-h if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-h' 'select-pane -L'
bind -n M-l if 'tmux display-message -p "#{pane_current_command}" | grep -iq vim' 'send-keys M-l' 'select-pane -R'

# ------------- #
# --- Mouse --- #
# ------------- #

set -g mouse on

# ------------------------ #
# --- Vim key bindings --- #
# ------------------------ #

# this allows using vi-like movements when in copy mode, so that it's possible
# to copy-paste between panes and between the terminal and vim
set-window-option -g mode-keys vi
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi r send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-selection

# in order to use prefix-p to paste, we need to override the "next buffer"
# binding, which we don't use often, see above the window navigation section
unbind p
bind p paste-buffer
# give 'v' to the user that still needs to go to the previous buffer
bind v previous-window

# Prevent the window jumping to the bottom when releasing the mouse in copy
# mode.
unbind -T copy-mode MouseDragEnd1Pane
unbind -T copy-mode-vi MouseDragEnd1Pane
