" --------------------------------------- "
" --- Syntax highlight customisations --- "
" --------------------------------------- "

" Highlight: tweaks
" -----------------

" for some reason the vertsplit highlight needs to be placed after the set
" colorcolumn option
" highlight VertSplit      cterm=none,reverse    ctermfg=8   ctermbg=8
" highlight EndOfBuffer    cterm=none            ctermfg=15
" highlight ColorColumn                                      ctermbg=15
" highlight WildMenu       cterm=bold            ctermfg=0   ctermbg=11
" highlight LineNr         cterm=none            ctermfg=7   ctermbg=none
" highlight CursorLineNr   cterm=none,underline  ctermfg=8   ctermbg=none
" highlight SignColumn     cterm=none                        ctermbg=none
" highlight Search         cterm=reverse         ctermfg=11  ctermbg=0
" highlight Todo           cterm=reverse,bold    ctermfg=7   ctermbg=0
" highlight Visual         cterm=reverse         ctermfg=7   ctermbg=0

" Highlight: Whitespace
" --------------------------------

" ExtraWhitespace is a new, custom highlight group
" highlight ExtraWhitespace cterm=reverse,bold ctermfg=1 ctermbg=none
" match ExtraWhitespace /\s\+$/

" --- highlight unwanted trailing whitespace --- "
" <https://vim.fandom.com/wiki/Highlight_unwanted_spaces#Highlighting_with_the_match_command>
"
" * only in normal mode
" autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
" autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
" autocmd InsertLeave * match ExtraWhitespace /\s\+$/
" autocmd BufWinLeave * call clearmatches()

" Highlight: Pandoc
" -----------------

" Highlight headers formatted with underlying '-' and '=' in bold cyan
" highlight pandocSetexHeader cterm=bold ctermfg=6 ctermbg=none
" highlight pandocAtxHeader ctermfg=6 ctermbg=none

" Highlight: A.L.E. (ALE)
" -----------------------

" white on dark red
" highlight ALEErrorSign cterm=reverse,bold ctermfg=1 ctermbg=none
" white on dark yellow
" highlight ALEWarningSign cterm=reverse,bold ctermfg=3 ctermbg=none
" black on bright yellow
" highlight ALEWarningSign cterm=bold ctermfg=none ctermbg=11
" white on light blue
" highlight ALEInfoSign cterm=reverse,bold ctermfg=12 ctermbg=none

" Highlight: Statusline
" ---------------------

" highlight StatusLine   cterm=none ctermfg=15 ctermbg=8
" highlight StatusLineNC cterm=none ctermfg=15 ctermbg=8

" highlight BE_StatuslineGreen          cterm=bold,reverse  ctermfg=10    ctermbg=none
" highlight BE_StatuslineGreenCentre    cterm=bold,reverse  ctermfg=2     ctermbg=none
" highlight BE_StatuslineBlue           cterm=bold,reverse  ctermfg=12    ctermbg=none
" highlight BE_StatuslineBlueCentre     cterm=bold,reverse  ctermfg=4     ctermbg=none
" highlight BE_StatuslineMagenta        cterm=bold,reverse  ctermfg=13    ctermbg=none
" highlight BE_StatuslineMagentaCentre  cterm=bold,reverse  ctermfg=5     ctermbg=none
" highlight BE_StatuslineCyan           cterm=bold,reverse  ctermfg=14    ctermbg=none
" highlight BE_StatuslineCyanCentre     cterm=bold,reverse  ctermfg=6     ctermbg=none
" highlight BE_StatuslineRed            cterm=bold,reverse  ctermfg=9     ctermbg=none
" highlight BE_StatuslineRedCentre      cterm=bold,reverse  ctermfg=1     ctermbg=none
" highlight BE_StatuslineGrey           cterm=bold,reverse  ctermfg=7     ctermbg=8
" highlight BE_StatuslineGreyCentre     cterm=bold,reverse  ctermfg=8     ctermbg=none
" highlight BE_StatuslineYellow         cterm=bold          ctermfg=none  ctermbg=11
" highlight BE_StatuslineYellowCentre   cterm=bold,reverse  ctermfg=3     ctermbg=none

" Highlight: Diffs
" ----------------

" use simple ansi-colours for readability in any terminal with an ANSI palette
" highlight DiffAdd     cterm=none,bold   ctermfg=2   ctermbg=15
" highlight DiffDelete  cterm=none        ctermfg=13  ctermbg=15
" highlight DiffChange  cterm=none        ctermfg=8   ctermbg=15
" highlight DiffText    cterm=none,bold   ctermfg=4   ctermbg=15

" Highlight: Extra todo-like keywords
" -----------------------------------

" Add keywords to be highlighted as TODOs (https://vi.stackexchange.com/a/19043)
" The synTodo line:
" 1. list all syntax items (execute("syntax list"))
" 2. split it into a list of lines (split(..., '\n'))
" 3. filter it to only contain lines with syntax group name that ends with Todo (filter(..., { i,v -> match(v, '^\w*Todo\>') == 0}))
" 4. remove everything after syntax group name (map(..., {i,v -> substitute(v, ' .*$', '', '')}))
" result -> a list of syntax group names that end with Todo.
" function! UpdateTodoKeywords(...)
"   let newKeywords = join(a:000, " ")
"   let synTodo = map(filter(split(execute("syntax list"), '\n') , { i,v -> match(v, '^\w*Todo\>') == 0}), {i,v -> substitute(v, ' .*$', '', '')})
"   for synGrp in synTodo
"     execute "syntax keyword " . synGrp . " contained " . newKeywords
"   endfor
" endfunction
"
" augroup Todo_CustomKeywords
"   autocmd!
"   autocmd Syntax * call UpdateTodoKeywords("NOTE", "NOTES", "INFO", "REVIEW", "IDEA", "BUG", "TBD")
" augroup END
