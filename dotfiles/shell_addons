# vim: set ft=bash:

# ----------------- #
# --- LOCAL BIN --- #
# ----------------- #

PATH="${PATH}:${HOME}/.local/bin"

# ----------------- #
# --- LS_COLORS --- #
# ----------------- #

# Generated from a custom dircolors file
#
#   :r !dircolors dotfiles/dircolors
#
# To customise further, open the dircolors file in Vim, which will display the
# codes in the corresponding color, and replace these lines by re-running the
# command above
#
LS_COLORS='rs=0:no=00:fi=00:di=34:mh=00:ln=32:pi=97;104:so=97;102:do=97;102:bd=105;97:cd=105;97:ex=31:*.sh=31:*.cmd=31:*.exe=31:*.com=31:*.btm=31:*.bat=31:*.csh=31:or=101;37:mi=101;37:su=31;103:sg=31;103:ca=31;103:tw=35;103:ow=35;103:st=36;103:*.tar=36:*.tgz=36:*.arc=36:*.arj=36:*.taz=36:*.lha=36:*.lz4=36:*.lzh=36:*.lzma=36:*.tlz=36:*.txz=36:*.tzo=36:*.t7z=36:*.zip=36:*.z=36:*.dz=36:*.gz=36:*.lrz=36:*.lz=36:*.lzo=36:*.xz=36:*.zst=36:*.tzst=36:*.bz2=36:*.bz=36:*.tbz=36:*.tbz2=36:*.tz=36:*.deb=36:*.rpm=36:*.jar=36:*.war=36:*.ear=36:*.sar=36:*.rar=36:*.alz=36:*.ace=36:*.zoo=36:*.cpio=36:*.7z=36:*.rz=36:*.cab=36:*.wim=36:*.swm=36:*.dwm=36:*.esd=36:*.jpg=33:*.jpeg=33:*.mjpg=33:*.mjpeg=33:*.gif=33:*.bmp=33:*.pbm=33:*.pgm=33:*.ppm=33:*.tga=33:*.xbm=33:*.xpm=33:*.tif=33:*.tiff=33:*.png=33:*.svg=33:*.svgz=33:*.mng=33:*.pcx=33:*.mov=33:*.mpg=33:*.mpeg=33:*.m2v=33:*.mkv=33:*.webm=33:*.webp=33:*.ogm=33:*.mp4=33:*.m4v=33:*.mp4v=33:*.vob=33:*.qt=33:*.nuv=33:*.wmv=33:*.asf=33:*.rm=33:*.rmvb=33:*.flc=33:*.avi=33:*.fli=33:*.flv=33:*.gl=33:*.dl=33:*.xcf=33:*.xwd=33:*.yuv=33:*.cgm=33:*.emf=33:*.ogv=33:*.ogx=33:*.aac=33:*.au=33:*.flac=33:*.m4a=33:*.mid=33:*.midi=33:*.mka=33:*.mp3=33:*.mpc=33:*.ogg=33:*.ra=33:*.wav=33:*.oga=33:*.opus=33:*.spx=33:*.xspf=33:*~=90:*#=90:*.log=90:*.tmp=90:*.bak=90:*.bkp=90:*.BAK=90:*.BKP=90:*.old=90:*.OLD=90:*.org_archive=90:*.off=90:*.OFF=90:*.dist=90:*.DIST=90:*.orig=90:*.ORIG=90:*.swp=90:*.swo=90:*.v=90:';
export LS_COLORS

# ------------ #
# --- LESS --- #
# ------------ #

export LESS="--ignore-case --RAW-CONTROL-CHARS --tabs=2 --mouse --wheel-lines=3 --LONG-PROMPT --shift=3"

# # -----------
# # --- GPG ---
# # -----------
#
# export GPG_TTY=$(tty)
# # This create-socketdir command is only required if a non default home
# # directory is used and the /run based sockets shall be used. For the default
# # home directory GnUPG creates a directory on the fly.
# if [[ ! -d $HOME/.gnupg && ( -d /run/user || -d /var/run/user ) ]]; then
#   gpgconf --create-socketdir
# fi

# ------------ #
# --- Ruby --- #
# ------------ #

# Use Brew-installed Ruby if available.
[[ -d "/usr/local/opt/ruby" ]] && PATH="/usr/local/opt/ruby/bin:$PATH"

# ------------- #
# --- goenv --- #
# ------------- #

# git clone https://github.com/syndbg/goenv.git ~/.goenv

# export GOENV_ROOT="$HOME/.goenv"
# export PATH="$GOENV_ROOT/bin:$PATH"
# eval "$(goenv init -)"
# export PATH="$GOROOT/bin:$PATH"
# export PATH="$PATH:$GOPATH/bin"

# --------------
# --- Golang ---
# --------------

if [[ -z "$(command -v gobrew)" ]]; then
  export GOPATH="$HOME/go"
  export PATH="$PATH:$GOPATH/bin"
  export PATH="/usr/local/go/bin:$PATH"
fi

# -------------- #
# --- gobrew --- #
# -------------- #

# https://github.com/kevincobain2000/gobrew
#
# this version of gobrew (written in Golang) is an order of magnitude faster
# than goenv (which is a shell script), so it has next to no overhead on new
# terminal sessions
#
# the only downside is that it doesn't support the system Go installation

if [[ -n "$(command -v gobrew)" ]]; then
  export PATH="$HOME/.gobrew/current/bin:$HOME/.gobrew/bin:$PATH"
  export GOPATH="$HOME/.gobrew/current/go"
fi

# ---------------------
# --- Output stream ---
# ---------------------

# only for interactive shells
if [[ -t 0 && $- = *i* ]]; then
  # Prevent CTRL-S from suspending the output stream
  # stty stop '' -ixoff
  # Prevent CTRL-Q from waking up the output stream
  # stty start '' -ixon
  # stty stop undef
  # stty start undef
  stty -ixon
fi

# ------------
# --- Tmux ---
# ------------

# attach to current session if there is only one, or start a new one
alias tm='if [[ "$(tmux ls 2>&1 | grep -i created | wc -l)" == "1" ]]; then tmux attach; else tmux; fi'

# update_auth_sock() {
#   SOCK="/tmp/ssh-agent-$USER-screen"
#
#   if test $SSH_AUTH_SOCK && [ $SSH_AUTH_SOCK != $SOCK ]
#   then
#     rm -f /tmp/ssh-agent-$USER-screen
#     ln -sf $SSH_AUTH_SOCK $SOCK
#     export SSH_AUTH_SOCK=$SOCK
#   fi
# }
#
# update_auth_sock()

# ------------------------
# --- Google Cloud SDK ---
# ------------------------

if [[ $SHELL =~ bash ]]; then
  [[ -f $HOME/.google-cloud-sdk/path.bash.inc ]] && source $HOME/.google-cloud-sdk/path.bash.inc
  [[ -f $HOME/google-cloud-sdk/path.bash.inc ]] && source $HOME/google-cloud-sdk/path.bash.inc
  [[ -f $HOME/.google-cloud-sdk/completion.bash.inc ]] && source $HOME/.google-cloud-sdk/completion.bash.inc
  [[ -f $HOME/google-cloud-sdk/completion.bash.inc ]] && source $HOME/google-cloud-sdk/completion.bash.inc
fi

if [[ $SHELL =~ zsh ]]; then
  [[ -f $HOME/.google-cloud-sdk/path.zsh.inc ]] && source $HOME/.google-cloud-sdk/path.zsh.inc
  [[ -f $HOME/google-cloud-sdk/path.zsh.inc ]] && source $HOME/google-cloud-sdk/path.zsh.inc
  [[ -f $HOME/.google-cloud-sdk/completion.zsh.inc ]] && source $HOME/.google-cloud-sdk/completion.zsh.inc
  [[ -f $HOME/google-cloud-sdk/completion.zsh.inc ]] && source $HOME/google-cloud-sdk/completion.zsh.inc
fi

# ----------------------------------- #
# --- Kubernetes CLI autocomplete --- #
# ----------------------------------- #

# TODO: this is very slow, because `kubectl completion bash` is slow,
#       replace with a file containing the output of the kubectl command
# if [[ -n "$(command -v kubectl)" ]]; then
#   source <(kubectl completion bash)
# fi

# ----------------
# --- Minikube ---
# ----------------

# export MINIKUBE_WANTKUBECTLDOWNLOADMSG=false
# export MINIKUBE_WANTUPDATENOTIFICATION=false
# export MINIKUBE_WANTREPORTERRORPROMPT=false
# export MINIKUBE_HOME=$HOME
# export CHANGE_MINIKUBE_NONE_USER=true
#
# mkdir -p $HOME/.kube
# touch $HOME/.kube/config
#
# export KUBECONFIG=$HOME/.kube/config

# -------------
# --- rbenv ---
# -------------

export PATH="$HOME/.rbenv/bin:$PATH"
# SLOW: rbenv init takes more than 150 ms. Use alias when needed.
# if [[ $(command -v rbenv) ]]; then
#   eval "$(rbenv init -)"
# fi
alias _init_rbenv='eval "$(rbenv init -)"'

# ------------- #
# --- pyenv --- #
# ------------- #

# SLOW: pyenv init takes more than 200 ms. Use alias when needed.
# if command -v pyenv 1>/dev/null 2>&1; then
#   eval "$(pyenv init -)"
# fi
alias _init_pyenv='eval "$(pyenv init -)"'

# -------------- #
# --- Editor --- #
# -------------- #

export EDITOR=$(command -v vim)
export VISUAL=$(command -v vim)

# ----------- #
# --- FZF --- #
# ----------- #

# Do not load fzf widgets here, but at the end of the configuration.
# See addons for specific shells
#
# [[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh
# [[ -f ~/.fzf.bash ]] && source ~/.fzf.bash

# The preview is set to be hidden by default, but available with a custom
# keybind (Ctrl-/ while in the fzf results)
#
# Also set custom colorscheme for ANSI colours.
export FZF_DEFAULT_OPTS="\
--extended \
--history=$HOME/.fzf_history \
--reverse \
--info=inline \
--bind='ctrl-/:toggle-preview' \
--preview-window=hidden \
--preview='[ -f {} ] && head -n 200 {}' \
--ansi \
--color='bg:-1,bg+:15,fg:8,fg+:-1,hl:12,hl+:4,info:2,border:7,spinner:1,header:5,pointer:4,marker:1,prompt:6' \
--color='info:2,border:7,spinner:1,header:5,pointer:4,marker:1,prompt:6' \
"

# if available, use fd to feed fzf
# see also the global fd ignore file
if [[ -n "$(command -v fd)" ]]; then
  fzf_base_command="fd --hidden --follow --color=always --no-ignore-vcs --ignore-file=${HOME}/.config/fd/ignore"
  export FZF_DEFAULT_COMMAND="${fzf_base_command} --type file"
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  export FZF_ALT_C_COMMAND="${fzf_base_command} --type directory"
fi

# the `~` key is normally easier to reach on both US and UK keyboards, PC and
# Mac than the default '**'
export FZF_COMPLETION_TRIGGER='~~'

# some other supported options (not an exhaustive list)
# FZF_TMUX_OPTS
# FZF_CTRL_T_OPTS
# FZF_CTRL_R_OPTS
# FZF_ALT_C_COMMAND
# FZF_ALT_C_OPTS
# FZF_COMPLETION_OPTS='+c -x'

# https://medium.com/@mrWinston/smarter-git-checkout-using-fzf-to-supercharge-your-commandline-7507db600996
function gch() {
 git checkout "$(git branch --all | fzf | tr -d '[:space:]')"
}

# -------------------- #
# --- RG (RIPGREP) --- #
# -------------------- #

export RIPGREP_CONFIG_PATH="${HOME}/.ripgreprc"

# ----------- #
# --- BAT --- #
# ----------- #

export BAT_THEME=GitHub

# ------------ #
# --- Rust --- #
# ------------ #

PATH="$PATH:$HOME/.cargo/bin"

# ------------------------ #
# --- fff file manager --- #
# ------------------------ #

export FFF_HIDDEN=1 # show hidden files by default
export FFF_COL2=7 # status line background
export FFF_COL5=0 # status line foreground
export FFF_COL4=4 # cursor (blue)

export FFF_CD_ON_EXIT=1
f() {
    fff "$@"
    cd "$(cat "${XDG_CACHE_HOME:=${HOME}/.cache}/fff/.fff_d")"
}

# ------------------------ #
# --- nnn file manager --- #
# ------------------------ #

# -a: auto-setup temporary NNN_FIFO
# -e: open text files in $VISUAL (else $EDITOR, fallback vi) [preferably CLI]
# -E: use $EDITOR for internal undetached edits
# -C: simpler colorscheme
# -H: show hidden files
# -J: disable auto-proceed on select
# -o: open files only on Enter key
# -R: disable roll-over at edges
# -x: show notice on selection cp, mv, rm completion, copy path to system clipboard on select

export NNN_OPTS="CoRea"
export NNN_PLUG='p:preview-tui-ext'

# https://github.com/jarun/nnn/wiki/Basic-use-cases#configure-cd-on-quit
n () {
  # Block nesting of nnn in subshells
  if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
    echo "nnn is already running"
    return
  fi

  # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
  # To cd on quit only on ^G, remove the "export" as in:
  #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
  # NOTE: NNN_TMPFILE is fixed, should not be modified
  # export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
  NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

  # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
  # stty start undef
  # stty stop undef
  # stty lwrap undef
  # stty lnext undef

  nnn "$@"

  if [ -f "$NNN_TMPFILE" ]; then
    . "$NNN_TMPFILE"
    rm -f "$NNN_TMPFILE" > /dev/null
  fi
}

# --------------- #
# --- Aliases --- #
# --------------- #

# --- shell --- #

# completely wipe the content of the shell buffer, instead of just scrolling
# the prompt to the top
alias cls="clear && printf '\e[3J'"

# remove duplicates from a list, without sorting
alias nauniq="awk '!seen[\$0]++'"

# time shortcuts
alias utcnow='date -u +"%Y-%m-%dT%H-%M-%SZ"'
alias epoch_ms="perl -MTime::HiRes=time -e 'printf \"%.3f\n\", time'"

# --- git --- #

# width refers to each column if side-by-side; we set it to half the current
# number of columns in the terminal
alias yd='ydiff --width $(expr $(stty size | cut -d" " -f2) / 2) --side-by-side'

alias gti='git'

alias g='git'
alias ga='git add'
alias gaa='git add $(git rev-parse --show-toplevel)'
alias gap='git add $(git rev-parse --show-toplevel) -p'
alias gb='git branch'
alias gba='git branch --all'
alias gci='git commit'
alias gcim='git commit -m'
alias gco='git checkout'
alias gcl='git checkout -' # "git checkout 'last'"
alias gd='git diff'
alias gds='git diff --staged'
alias gf='git fetch'
alias gnp='git --no-pager'
alias gp='git pull'
alias gpl='git pull'
alias gpp='git push origin HEAD -u'
alias gps='git push origin HEAD -u'
alias gs='git status'
alias gss='git status -sb'
alias gst='git status -sb'
alias gsm='git submodule update --init --recursive'
alias gsd='git diff --staged'
alias gta='git stash --include-untracked'

# --- ls --- #

# alias ll='ls -l --human --almost-all --color=auto --classify --time-style=long-iso --group-directories-first'

#--- exa ---#

alias l='exa --long --header --git --group-directories-first --classify --group --time-style=long-iso --octal-permissions'
# alias ee='e --all'
alias ll='l --all'

# --- tree --- #

# -F will prints markers for dirs, executables and other special files, like 'ls -F'
alias tree='command tree --dirsfirst -F'

# --- yq --- #

# takes JSON from stdin and converts it to YAML
alias jy='yq eval --prettyPrint -'
# takes YAML from stdin and converts it to JSON
alias yj='yq eval --tojson -'

# --- bundler --- #

alias be='bundle exec'

# --- docker --- #

alias dk='docker'
alias dc='docker-compose'
alias rmimages='docker rmi $(docker images -a -q)'
alias rmcontainers='docker rm $(docker ps -a -f status=exited -q)'
alias dkcont-nuke='docker ps -aq | xargs --no-run-if-empty docker stop | xargs --no-run-if-empty docker rm -v'
alias dkimg-nuke=$'docker ps --filter=status=exited --quiet  | xargs --no-run-if-empty docker rm && docker images --filter=dangling=true --quiet | xargs --no-run-if-empty docker rmi && docker volume ls --filter=dangling=true --quiet | awk \'$0 ~ "^[0-9a-f]{64}$"\' | xargs --no-run-if-empty docker volume rm'
alias rmkube='docker stop $(docker ps -q --filter name=k8s); docker rm $(docker ps -aq --filter name=k8s)'

# --- kubernetes --- #

alias kc='kubectl'
alias kx='kubectx'

# --- glow --- #

alias glow='glow --pager'

# --- PlantUML server --- #

alias umlup='docker run --name plantuml --rm -d -p 8080:8080 plantuml/plantuml-server:jetty'
alias umldown='docker stop plantuml'

# --- ImageMagick --- #

# create a compressed JPG copy of each PNG in the current directory
alias screenshot-minify='mogrify -strip -unsharp 0.25x0.25+8+0.065 -resize 80% -quality 85 -format jpg *.png'
