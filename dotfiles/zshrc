# vim: set ft=zsh:

# unfortunately this takes more than 100 ms, but zsh is hardly usable without
# it, so we are paying this price until we port the individual features we need
export ZSH="${HOME}/.oh-my-zsh"
plugins=()
source $ZSH/oh-my-zsh.sh

# optionally, coming from Bash
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# export MANPATH="/usr/local/man:$MANPATH"

export LANG=en_GB.UTF-8

# setopt alwaystoend
# setopt autocd
# setopt autopushd
# setopt completeinword
# setopt extendedhistory
# setopt histignorespace
# setopt histverify
# setopt interactivecomments
# setopt longlistjobs
# setopt monitor
# setopt noflowcontrol
# setopt pushdignoredups
# setopt pushdminus
# setopt sharehistory
# setopt zle

# --------------- #
# --- History --- #
# --------------- #

# don't add history entry if it's a duplicate of the previous command (and only
# if it's exactly the previous one, older duplicates don't count)
setopt HIST_IGNORE_DUPS
# when searching the history, don't show any duplicates in the results
setopt HIST_FIND_NO_DUPS
# remove whitespace from any command before adding it to the history
setopt HIST_REDUCE_BLANKS
# always expire history items in the original order (regardless of duplicates)
setopt NO_HIST_EXPIRE_DUPS_FIRST
setopt NO_HIST_IGNORE_ALL_DUPS

# prevents accidentally overwriting an existing file, override with >|
setopt NO_CLOBBER

# disable messing with redirection (treat redirection and pipes like bash)
setopt NO_MULTIOS

export COMPLETION_WAITING_DOTS="true"
export HIST_STAMPS="yyyy-mm-dd"

export HISTSIZE=250000 # 250K lines

# autocomplete hidden files...
setopt GLOB_DOTS
# ...but exclude "." and ".."
zstyle ':completion:*' special-dirs false

# allow to choose matching options when a command has a wildcard, instead of
# completing the command with all the matches
setopt GLOB_COMPLETE

# use the same colors for completion as ls
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# highlight current completion option
zstyle ':completion:*' menu select

# case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'

# enable autocompletion for aliases defined in shell_addons;
# each alias will use the give command as the underlying target for the
# autocompletion
#
# the "completealiases" option prevents aliases on the command  line  from
# being internally substituted before completion is attempted, so we need to
# disable it
unsetopt COMPLETE_ALIASES

# set up local completions
fpath+=~/.zfunc

# this would normally be done by oh-my-zsh but even if was installed, some apps
# still need it again
autoload -Uz compinit && compinit -i

# only autocomplete targets for make, not files <https://unix.stackexchange.com/a/499322>
zstyle ':completion:*:*:make:*' tag-order 'targets'

compdef ll='ls'
compdef la='ls'

ZSH_SITE_FUNCTIONS="/usr/local/share/zsh/site-functions"

if [[ -n "$(command -v git)" && -r "${ZSH_SITE_FUNCTIONS}/_git" ]]; then
  compdef gti='git'
  compdef g='git'
  compdef ga='git'
  compdef gaa='git'
  compdef gap='git'
  compdef gb='git'
  compdef gba='git'
  compdef gci='git'
  compdef gcim='git'
  compdef gco='git'
  compdef gcl='git'
  compdef gd='git'
  compdef gds='git'
  compdef gf='git'
  compdef gnp='git'
  compdef gp='git'
  compdef gpl='git'
  compdef gpp='git'
  compdef gps='git'
  compdef gs='git'
  compdef gss='git'
  compdef gst='git'
  compdef gsm='git'
  compdef gsd='git'
fi

if [[ -n "$(command -v docker)" && -r "${ZSH_SITE_FUNCTIONS}/_docker" ]]; then
  compdef dk='docker'
fi

if [[ -n "$(command -v docker-compose)" && -r "${ZSH_SITE_FUNCTIONS}/_docker" ]]; then
  compdef dc='docker-compose'
fi

if [[ -n "$(command -v kubectl)" && -r "${ZSH_SITE_FUNCTIONS}/_kubectl" ]]; then
  compdef kc='kubectl'
fi

if [[ -n "$(command -v kubectx)" && -r "${ZSH_SITE_FUNCTIONS}/_kubectx" ]]; then
  compdef kx='kubectx'
fi

function _bravoecho_git_branch() {
  local branch_name=$(git branch --show-current 2>/dev/null)

  if [[ -n "${branch_name}" ]]; then
    echo " on %F{green}${branch_name}%f"
  fi
}

# taken from oh-my-zsh
# macOS's $HOST changes with dhcp, etc. Use ComputerName if possible.
function _bravoecho_hostname() {
  local short_host=
  if [[ "$OSTYPE" = darwin* ]]; then
    short_host=$(scutil --get ComputerName 2>/dev/null) || short_host=${HOST/.*/}
  else
    short_host=${HOST/.*/}
  fi

  echo $short_host
}

[[ -n "${COMPUTER_NAME}" ]] || export COMPUTER_NAME="$(_bravoecho_hostname)"

# Lightweight prompt in pure zsh syntax that:
#
#   * colorises the info about user and host
#   * displays the current path
#   * displays the current git branch if it's in a repo
#   * puts the cursor into a new line
#
setopt PROMPT_SUBST # evaluate the shell expressions on every prompt
prompt_newline=$'\n'
if [[ "$TERM" != "dumb" ]] && [[ "$DISABLE_LS_COLORS" != "true" ]]; then
  # %n = username
  # %m = hostname, but we don't use because it changes with networks and VPNs
  # %~ = pwd with tilde

  PROMPT='[%F{red}%n%f@%F{magenta}${COMPUTER_NAME}%f:%F{blue}%~%f$(_bravoecho_git_branch)]${prompt_newline}%# '
else
  PROMPT='[%n@%m:%~]${prompt_newline}%# '
fi

# ----------- #
# --- FZF --- #
# ----------- #

# fzf widgets should be loaded as last, to ensure they are not overridden by
# native shell functionality
[[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh

# ----------- #
# --- NVM --- #
# ----------- #

# SLOW: nvm init takes more than 700 ms. Use alias when needed.
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
alias _init_nvm='[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"'

#------------#
#--- JUMP ---#
#------------#

eval "$(jump shell zsh)"

# -------------------- #
# --- Key bindings --- #
# -------------------- #

# Use emacs keybindings; the full list can be seen with the command:
# 'bindkey -M emacs'.
#
# Disable "history search" with arrow up/down (https://superuser.com/a/1494820)
# in particular is already set in emacs mode.
#
# Unfortunately there are still many things that don't work out of the box as
# they do in bash, so oh-my-zsh provides a large number of fixes:
# <https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/079e7bb5e0a79171f3356d55d3f6302a82645a39/lib/key-bindings.zsh>
#
# Here we attempt a more primitive solution, but in the long run it might just
# make more sense to bring that file in.
bindkey -e

# Some Mac specific keybinding fixes
if [[ "$(uname -s)" == "Darwin" ]]; then
  bindkey "Ã§" fzf-cd-widget # Alt-C (Option-C)
  bindkey 'âˆ‚' kill-word # Alt-D
fi

# provided by ohmyzsh for now
# # ctrl arrow left/right: move by one word
# # note: this works for the xterm family of terminal emulators, including tmux
# bindkey '[1;5C' forward-word
# bindkey '[1;5D' backward-word

# -------------------------------------- #
# --- Additional shell configuration --- #
# -------------------------------------- #

if [[ "$(uname -s)" =~ Darwin ]]; then
  [[ -e "${HOME}/.shell_addons_mac" ]] && source ~/.shell_addons_mac
fi

[[ -e "${HOME}/.shell_addons" ]] && source ~/.shell_addons
[[ -e "${HOME}/.shell_addons_local" ]] && source ~/.shell_addons_local

# Remove duplicates from $PATH
# https://til.hashrocket.com/posts/7evpdebn7g-remove-duplicates-in-zsh-path
typeset -aU path

# the direnv hook must be at the end of the rc file
[[ -n "$(command -v direnv)" ]] && eval "$(direnv hook zsh)"
