# vim: set ft=zsh:

# start=$(/opt/homebrew/bin/gdate '+%s.%N')
# ----------------------- #
# --- General options --- #
# ----------------------- #

# cd into dir by simply entering its path
setopt autocd

# Make cd push the old directory onto the directory stack.
setopt autopushd

# Don't push multiple copies of the same directory onto the directory stack.
setopt pushdignoredups

# Exchange the meanings of `+' and `-' when used with a number to specify
# a directory in the stack.
setopt pushdminus

# allow comments in interactive shell
setopt interactivecomments

# Do not allow `>' redirection to truncate existing files.
# `>!' or `>|' must be used to truncate a file.
# prevents accidentally overwriting an existing file, override with >|
setopt noclobber

# Do not report error when using >> to append to a file that doesn't exist yet,
# but create it. Requires noclobber.
setopt appendcreate

# disable messing with redirection (treat redirection and pipes like bash)
setopt nomultios

# If this option is unset, output flow control via start/stop characters
# (usually assigned to ^S/^Q) is disabled in the shell's editor. setopt
# setopt noflowcontrol

# Print job notifications in the long format by default.Print job notifications
# in the long format by default.
setopt longlistjobs

# ------------------ #
# --- UI options --- #
# ------------------ #

autoload -U colors && colors

# do not highlight pasted content
zle_highlight=('paste:none')

# never emit the beep sequence
unsetopt beep

# Assume that the terminal displays combining characters correctly (characters
# that modify the preceding character)
setopt combiningchars

# ------------------------------------- #
# --- Integrate shell with Homebrew --- #
# ------------------------------------- #

# TODO: should these go into the common config?
HOMEBREW_PREFIX=
if [[ "$(uname -s)" == "Darwin" && "$(uname -m)" == "arm64" ]]; then
  HOMEBREW_PREFIX='/opt/homebrew'
else
  HOMEBREW_PREFIX='/usr/local'
fi

# from 'brew shellenv'
export HOMEBREW_PREFIX
export HOMEBREW_CELLAR="$HOMEBREW_PREFIX/Cellar"
export HOMEBREW_REPOSITORY="$HOMEBREW_PREFIX"
export PATH="$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin${PATH+:$PATH}"
# export MANPATH="$HOMEBREW_PREFIX/share/man${MANPATH+:$MANPATH}:"
export MANPATH="$HOMEBREW_PREFIX/share/man:$HOMEBREW_PREFIX/opt/curl/share/man:$HOMEBREW_PREFIX/lib/node_modules/npm/man${MANPATH+:$MANPATH}:"
export INFOPATH="$HOMEBREW_PREFIX/share/info:${INFOPATH:-}"

# ---------------------------------- #
# --- Common shell configuration --- #
# ---------------------------------- #

[[ -e "${HOME}/.shell_addons" ]] && source ~/.shell_addons
[[ -e "${HOME}/.shell_addons_local" ]] && source ~/.shell_addons_local

# ------------------------- #
# --- Language settings --- #
# ------------------------- #

export LANG=en_GB.UTF-8

# --------------- #
# --- History --- #
# --------------- #

# append to the history file instead of replacing it
setopt appendhistory

# don't add history entry if it's a duplicate of the previous command (and only
# if it's exactly the previous one, older duplicates don't count)
setopt histignoredups

# when searching the history, don't show any duplicates in the results
setopt histfindnodups

# remove whitespace from any command before adding it to the history
setopt histreduceblanks

# always expire history items in the original order (regardless of duplicates)
setopt nohistexpiredupsfirst
setopt nohistignorealldups

# Remove command lines from the history list when the first character on the
# line is a space, or when one of the expanded aliases contains a leading space.
setopt histignorespace

# Remove superfluous blanks from each command line being added to the history list.
setopt histreduceblanks

# Whenever the user enters a line with history expansion, don't execute the line
# directly; instead, perform history expansion and reload the line into the
# editing buffer.
setopt histverify

# This option both imports new commands from the history file, and also causes
# your typed commands to be appended to the history file.
setopt sharehistory

# Save each command's beginning timestamp (in seconds since the epoch) and the
# duration (in seconds) to the history file.
setopt extendedhistory

export HIST_STAMPS="yyyy-mm-dd"
export HISTFILESIZE=100000000 # 10 MiB
export HISTSIZE=100000
export SAVEHIST=$HISTSIZE
export HISTFILE=~/.zsh_history

alias -- -='cd -' # from oh-my-zsh

# ------------------ #
# --- Completion --- #
# ------------------ #

# automatically load bash completion functions
# autoload -U +X bashcompinit && bashcompinit

# set up local completions
ZSH_SITE_FUNCTIONS=$HOME/.config/zsh/site-functions

fpath=($ZSH_SITE_FUNCTIONS $fpath)

autoload -Uz compinit

# If unset, the cursor is set to the end of the word if completion is started.
# Otherwise it stays there and completion is done from both ends. setopt
# completeinword

# On an ambiguous completion, instead of listing possibilities or beeping,
# insert the first match immediately. Then when completion is requested again,
# remove the first match and insert the second match, etc. When there are no
# more matches, go back to the first one again. This option overrides AUTO_MENU.
# setopt menucomplete

# Treat the `#', `~' and `^' characters as part of patterns for filename
# generation, etc. (An initial unquoted `~' always produces named directory
# expansion.)
setopt extendedglob

# NOMATCH (+3) <C> <Z> If a pattern for filename generation has no matches,
# print an error, instead of leaving it unchanged in the argument list. This
# also applies to file expansion of an initial `~' or `='.
setopt nomatch

# If a completion is performed with the cursor within a word, and a full
# completion is inserted, the cursor is moved to the end of the word.
setopt alwaystoend

# highlight current completion option
zstyle ':completion:*:*:*:*:*' menu select
# zstyle ':completion:*' menu select
# zstyle ':completion::complete:lsof:*' menu yes select
zmodload zsh/complete
zmodload zsh/complist

# autocomplete hidden files (Do not require a leading `.' in a filename to be
# matched explicitly.)
setopt globdots
# ...but don't list "." and ".."
zstyle ':completion:*' special-dirs false

# When the current word has a glob pattern, do not insert all the words
# resulting from the expansion but generate matches as for completion and cycle
# through them like MENU_COMPLETE. Allow to choose matching options when
# a command has a wildcard, instead of completing the command with all the
# matches.
setopt globcomplete

# case insensitive completion
# zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
# zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}'
zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|=*' 'l:|=* r:|=*'
# these seem to break git autocompletion
# zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
# zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|=*' 'l:|=* r:|=*'

# use the same colors for completion as ls
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# autocompletion for aliases must be disabled, otherwise it won't work for
# secondary commands; for example, if completealiases is active, when trying to
# complete a git alias that translates to "git switch", the autocompletion will
# only offer options for "git", not the specific options for "switch", which
# makes it less useful
unsetopt completealiases

# only autocomplete targets for make, not files
# <https://unix.stackexchange.com/a/499322>
zstyle ':completion:*:*:make:*' tag-order 'targets'

if [[ -n "${terminfo[kcbt]}" ]]; then
  bindkey -M emacs "${terminfo[kcbt]}" reverse-menu-complete
fi

# compinit -i
compinit -u -C -d # TODO: what do these options mean

compdef ll='ls'
compdef la='ls'

# TODO: add missing git aliases
if [[ -n "$(command -v git)" && -n "$(command -v _git)" ]]; then
  compdef g='git'
  compdef ga='git'
  compdef gaa='git'
  compdef gap='git'
  compdef gb='git'
  compdef gba='git'
  compdef gci='git'
  compdef gcim='git'
  compdef gcinv='git'
  compdef gco='git'
  compdef gcl='git'
  compdef gd='git'
  compdef gds='git'
  compdef gf='git'
  compdef gnp='git'
  compdef gp='git'
  compdef gpl='git'
  compdef gpp='git'
  compdef gps='git'
  compdef gs='git'
  compdef gsi='git'
  compdef gss='git'
  compdef gst='git'
  compdef gsm='git'
  compdef gsd='git'
  compdef gws='git'
  compdef gsw='git'
  compdef gw='git'
  compdef sw='git'
  compdef gre='git'
  compdef gr='git'
  compdef gta='git'
  compdef gdd='git'
  compdef gdds='git'
  compdef gdh='git'
  compdef gdl='git'
fi

if [[ -n "$(command -v docker)" && -n "$(command -v _docker)" ]]; then
  compdef dk='docker'
fi

if [[ -n "$(command -v docker-compose)" && -n "$(command -v _docker)" ]]; then
  compdef dc='docker-compose'
fi

if [[ -n "$(command -v kubectl)" && -n "$(command -v _kubectl)" ]]; then
  compdef kc='kubectl'
fi

if [[ -n "$(command -v kubectx)" && -n "$(command -v _kubectx)" ]]; then
  compdef kx='kubectx'
fi

if [[ -n "$(command -v watson)" && -n "$(command -v _watson)" ]]; then
  compdef ww='watson'
  compdef wad='watson'
  compdef waw='watson'
  compdef wld='watson'
  compdef wlw='watson'
fi

if [[ -n "$(command -v tmux)" && -n "$(command -v _tmux)" ]]; then
  compdef tmax='tmux'
  compdef tumx='tmux'
fi

# ----------- #
# --- FZF --- #
# ----------- #

if [[ -e "${HOME}/.fzf.zsh" ]]; then
  source ~/.fzf.zsh
fi

# -------------------------- #
# --- FZF customisations --- #
# -------------------------- #

# ALT-F - Custom FZF key-binding that pastes the selected directories into the
# command line.
#
# <https://github.com/junegunn/fzf/blob/master/shell/key-bindings.zsh>
# <https://github.com/junegunn/fzf/wiki/Examples#changing-directory>

__be_dsel() {
  local cmd="${FZF_ALT_F_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type d -print \
    2> /dev/null | cut -b3-"}"
  setopt localoptions pipefail no_aliases 2> /dev/null
  local item
  eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" $(__be_fzfcmd) -m "$@" | while read item; do
    echo -n "${(q)item} "
  done
  local ret=$?
  echo
  return $ret
}

__be_fzfcmd() {
  [ -n "$TMUX_PANE" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "$FZF_TMUX_OPTS" ]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}

be-fzf-dir-widget() {
  LBUFFER="${LBUFFER}$(__be_dsel)"
  local ret=$?
  zle reset-prompt
  return $ret
}

zle -N be-fzf-dir-widget # register the widget
# bindkey -M emacs '^[f' be-fzf-dir-widget
bindkey -M emacs '\ef' be-fzf-dir-widget

# -------------------- #
# --- Key-bindings --- #
# -------------------- #

# Use emacs keybindings; the full list can be seen with the command:
# 'bindkey -M emacs'.
bindkey -e

# ctrl arrow left/right: move by one word
# note: this works for the xterm family of terminal emulators, including tmux
bindkey -M emacs '^[[1;5C' forward-word
bindkey -M emacs '^[[1;5D' backward-word

# home/end keys
bindkey -M emacs '^[[1~'   beginning-of-line
bindkey -M emacs '^[[4~'   end-of-line

# delete key
bindkey -M emacs '^[[3~'  delete-char
# bindkey -M emacs "^[3;5~" delete-char # from oh-my-zsh

# ctrl-delete
bindkey -M emacs '^[[3;5~' kill-word

# [Ctrl-r] - Search backward incrementally for a specified string. The string
# may begin with ^ to anchor the search to the beginning of the line.
#
# Superseded by FZF.
# bindkey '^r' history-incremental-search-backward

# Edit the current command line in $EDITOR
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

# emulate bash, cut to beginning of line with Ctrl+U instead of cutting the
# whole line.
bindkey \^U backward-kill-line

# ---------------------------------------------- #
# --- Key-bindings: Fixes for Alt+<x> on Mac --- #
# ---------------------------------------------- #

# These should not be neeeded for iTerm if the Option key is mapped to Esc+.
#
# However, they are still needed for Kitty, despite having set:
# 'macos_option_as_alt yes'

bindkey -M emacs 'ç' fzf-cd-widget     # Alt-C
bindkey -M emacs '∂' kill-word         # Alt-D
bindkey -M emacs 'ƒ' be-fzf-dir-widget # Alt-F

# ---------------- #
# --- Hostname --- #
# ---------------- #

# taken from oh-my-zsh
# macOS's $HOST changes with dhcp, etc. Use ComputerName if possible.
function _bravoecho_hostname() {
  local short_host=
  if [[ "$OSTYPE" = darwin* ]]; then
    short_host=$(scutil --get ComputerName 2>/dev/null) || short_host=${HOST/.*/}
  else
    short_host=${HOST/.*/}
  fi

  echo $short_host
}

[[ -n "${COMPUTER_NAME}" ]] || export COMPUTER_NAME="$(_bravoecho_hostname)"

# ------------------------------------------------------------------ #
# --- Prompt timer: print time elopsed for long-running commands --- #
# ------------------------------------------------------------------ #

_be_command_time_preexec() {
  setopt local_options BASH_REMATCH

  # reset the time message
  # The time info needs to be exported to be available in the zsh prompt.
  export COMMAND_TIME_PROMPT=""

  # Skip the commands specified in the dedicated env var.
  # Account for aliases, only consider the actual command.
  # (TODO: needs to account for inline env vars)
  # (TODO: needs to account for sudo)
  if [ -n "$BE_ZSH_COMMAND_TIME_EXCLUDE" ]; then
    local cmd="$1"
    cmd=$(echo "${cmd}" | grep -Eo '^[^[:blank:]|]+')

    regex="^alias\ .+='([^[:blank:]|]+)"
    if [[ $(command -v "${cmd}") =~ $regex ]]; then
      cmd="${BASH_REMATCH[2]}"
    fi

    for exc ($BE_ZSH_COMMAND_TIME_EXCLUDE) do;
      if [ "$(echo "${cmd}" | grep -Ec "^$exc\b")" -gt 0 ]; then
        return
      fi
    done
  fi

  # in zsh the SECONDS env var contains the number of seconds since the shell
  # was started
  #
  # (global variable for cross-function communication)
  timer=${timer:-$SECONDS}
}

_be_command_time_precmd() {
  # nothing to do if the timer global is not set
  if [[ -z "${timer+x}" ]]; then
    # ensure the time is only printed once
    unset COMMAND_TIME_PROMPT
    return
  fi

  # [[ -n "${timer+x}" ]] || return
  [[ -n "$TTY" ]] || return

  local elapsed_secs=$(($SECONDS - $timer))
  unset timer

  [[ $elapsed_secs -ge ${BE_ZSH_COMMAND_TIME_MIN_SECONDS:-3} ]] || return

  local elapsed_fmt=
  local hours=$(($elapsed_secs/3600))
  local minutes=$(($elapsed_secs%3600/60))
  local seconds=$(($elapsed_secs%60))

  if [[ $hours -gt 0 ]]; then
    elapsed_fmt=$(printf '%dh:%02dm:%02ds' ${hours} ${minutes} ${seconds})
  elif [[ $minutes -gt 0 ]]; then
    elapsed_fmt=$(printf '%dm:%02ds' ${minutes} ${seconds})
  else
    elapsed_fmt=$(printf '%d seconds' ${seconds})
  fi

  # The time info needs to be exported to be available in the zsh prompt.
  export COMMAND_TIME_PROMPT="[%B%F{cyan}${elapsed_fmt}%f%b]"$'\n'
}

precmd_functions+=(_be_command_time_precmd)
preexec_functions+=(_be_command_time_preexec)

# Switch to an allow-list instead of an exclude-list.
BE_ZSH_COMMAND_TIME_EXCLUDE=(
  "bat"
  "cat"
  "du"
  "fg"
  "gch"
  "gdu"
  "git"
  "gotop"
  "htop"
  "irb"
  "less"
  "lf"
  "man"
  "n"
  "pry"
  "reflex"
  "sqlite3"
  "ssh"
  "tig"
  "tmux"
  "vim"
  "watch"
  "watson"
  "ww"
  "vimdiff"
  "tm"
)
# declare -A BE_ZSH_COMMAND_TIME_EXCLUDE
# BE_ZSH_COMMAND_TIME_EXCLUDE["vim"]=true
# BE_ZSH_COMMAND_TIME_EXCLUDE["docker"]=true

# ------------------------- #
# --- Prompt formatting --- #
# ------------------------- #

#   Requires the '_parse_git_status' helper (see the shell_addons file)
#   * print exit code if non-zero
#   * current path
#   * current git branch if it's in a repo
#   * git status
#   * puts the cursor into a new line

# evaluate the shell expressions on every prompt
#
# If set, parameter expansion, command substitution and arithmetic expansion are performed in
# prompts. Substitutions within prompts do not affect the command status.
setopt promptsubst

prompt_newline=$'\n'
if [[ "$TERM" != "dumb" ]] && [[ "$DISABLE_LS_COLORS" != "true" ]]; then
  # %~ = pwd with tilde
  # print warning and exit code if the previous command failed
  PROMPT='%(?..[%B%F{red}exit code: %?%f%b]${prompt_newline})${COMMAND_TIME_PROMPT}[%F{blue}%~%f$(_parse_git_status)]${prompt_newline}%# '
else
  PROMPT='[%n@%m:%~]${prompt_newline}%# '
fi

# ----------- #
# --- NVM --- #
# ----------- #

# SLOW: nvm init takes more than 700 ms. Use alias when needed.
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
alias _init_nvm='[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"'

#------------#
#--- Jump ---#
#------------#

# [ -n "$(command -v jump)" ] && eval "$(jump shell zsh)"

# -------------- #
# --- Zoxide --- #
# -------------- #

[ -n "$(command -v zoxide)" ] && eval "$(zoxide init zsh)"

# ------------------------
# --- Google Cloud SDK ---
# ------------------------

export PATH=$HOME/google-cloud-sdk/bin:$PATH
gcloud_zsh_completion="$HOME/google-cloud-sdk/completion.zsh.inc"
[ -f $gcloud_zsh_completion ] && source $gcloud_zsh_completion

# As of 2022-01-23 gcloud still relies on Python 3.9 (needs 'Mapping'.)
export CLOUDSDK_PYTHON=python3.9

# ----------------- #
# --- Terraform --- #
# ----------------- #

# requires: autoload -U +X bashcompinit && bashcompinit
TERRAFORM_AUTOCOMPLETE=$HOMEBREW_PREFIX/bin/terraform
[ -f $TERRAFORM_AUTOCOMPLETE ] && complete -o nospace -C $TERRAFORM_AUTOCOMPLETE terraform

# -------------------------------------- #
# --- Additional shell configuration --- #
# -------------------------------------- #

# Remove duplicates from various PATHs
# https://til.hashrocket.com/posts/7evpdebn7g-remove-duplicates-in-zsh-path
typeset -aU path
typeset -aU manpath
typeset -aU infopath

# --------------
# --- Direnv ---
# --------------

# the direnv hook must be at the end of the rc file
#
# `|| true` is necessary in case direnv is not (yet) installed, to avoid the
# exit code is 1 when a new shell is open, because this is the last statement
# in the zshrc
[[ -n "$(command -v direnv)" ]] && eval "$(direnv hook zsh)" || true

# end=$(/opt/homebrew/bin/gdate '+%s.%N')
# runtime=$( echo "$end - $start" | bc -l )
# echo $runtime
