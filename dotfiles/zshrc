# vim: set ft=zsh:

# set up local completions
ZSH_SITE_FUNCTIONS=$HOME/.config/zsh/site-functions

fpath=($ZSH_SITE_FUNCTIONS $fpath)

# unfortunately this takes more than 100 ms, but zsh is hardly usable without
# it, so we are paying this price until we port the individual features we
# need, which is probably code for "never"
export ZSH="${HOME}/.oh-my-zsh"
plugins=()
source $ZSH/oh-my-zsh.sh

HOMEBREW_PREFIX=
if [[ "$(uname -m)" == "arm64" ]]; then
  HOMEBREW_PREFIX='/opt/homebrew'
elif [[ "$(uname -m)" == "x86_64" ]]; then
  HOMEBREW_PREFIX='/usr/local'
fi

# from brew shellenv
export HOMEBREW_PREFIX
export HOMEBREW_CELLAR="$HOMEBREW_PREFIX/Cellar"
export HOMEBREW_REPOSITORY="$HOMEBREW_PREFIX"
export PATH="$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin${PATH+:$PATH}"
# export MANPATH="$HOMEBREW_PREFIX/share/man${MANPATH+:$MANPATH}:"
export MANPATH="$HOMEBREW_PREFIX/share/man:$HOMEBREW_PREFIX/opt/curl/share/man:$HOMEBREW_PREFIX/lib/node_modules/npm/man${MANPATH+:$MANPATH}:"
export INFOPATH="$HOMEBREW_PREFIX/share/info:${INFOPATH:-}"

export LANG=en_GB.UTF-8

# automatically run the 'time' commmand if total user time + system time is
# greater than the specified value (in seconds)
#
# this isn't great because it operates on all commands, so that for example it
# will print the result of 'time' every time vim is closed
#
# REPORTTIME=3

# setopt alwaystoend
# setopt autocd
# setopt autopushd
# setopt completeinword
# setopt extendedhistory
# setopt histignorespace
# setopt histverify
# setopt interactivecomments
# setopt longlistjobs
# setopt monitor
# setopt noflowcontrol
# setopt pushdignoredups
# setopt pushdminus
# setopt sharehistory
# setopt zle

# don't add history entry if it's a duplicate of the previous command (and only
# if it's exactly the previous one, older duplicates don't count)
setopt HIST_IGNORE_DUPS
# when searching the history, don't show any duplicates in the results
setopt HIST_FIND_NO_DUPS
# remove whitespace from any command before adding it to the history
setopt HIST_REDUCE_BLANKS
# always expire history items in the original order (regardless of duplicates)
setopt NO_HIST_EXPIRE_DUPS_FIRST
setopt NO_HIST_IGNORE_ALL_DUPS
export HIST_STAMPS="yyyy-mm-dd"
export HISTFILESIZE=100000000 # 10 MiB
export HISTSIZE=100000
export SAVEHIST=$HISTSIZE

# prevents accidentally overwriting an existing file, override with >|
setopt NO_CLOBBER

# disable messing with redirection (treat redirection and pipes like bash)
setopt NO_MULTIOS

export COMPLETION_WAITING_DOTS="true"
# autocomplete hidden files...
setopt GLOB_DOTS
# ...but exclude "." and ".."
zstyle ':completion:*' special-dirs false

# allow to choose matching options when a command has a wildcard, instead of
# completing the command with all the matches
setopt GLOB_COMPLETE

# use the same colors for completion as ls
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# highlight current completion option
zstyle ':completion:*' menu select

# case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'

# enable autocompletion for aliases defined in shell_addons;
# each alias will use the give command as the underlying target for the
# autocompletion
#
# the "completealiases" option prevents aliases on the command line from
# being internally substituted before completion is attempted, so we need to
# disable it
unsetopt COMPLETE_ALIASES

# # this would normally be done by oh-my-zsh but even if was installed, some apps
# # still need it again
# autoload -Uz compinit && compinit -i

# only autocomplete targets for make, not files <https://unix.stackexchange.com/a/499322>
zstyle ':completion:*:*:make:*' tag-order 'targets'

compdef ll='ls'
compdef la='ls'

# TODO: add missing git aliases
if [[ -n "$(command -v git)" && -r "${ZSH_SITE_FUNCTIONS}/_git" ]]; then
  compdef g='git'
  compdef ga='git'
  compdef gaa='git'
  compdef gap='git'
  compdef gb='git'
  compdef gba='git'
  compdef gci='git'
  compdef gcim='git'
  compdef gco='git'
  compdef gcl='git'
  compdef gd='git'
  compdef gds='git'
  compdef gf='git'
  compdef gnp='git'
  compdef gp='git'
  compdef gpl='git'
  compdef gpp='git'
  compdef gps='git'
  compdef gs='git'
  compdef gsi='git'
  compdef gss='git'
  compdef gst='git'
  compdef gsm='git'
  compdef gsd='git'
  compdef gws='git'
  compdef gsw='git'
  compdef gw='git'
  compdef sw='git'
  compdef gre='git'
  compdef gr='git'
  compdef gta='git'
  compdef gdd='git'
  compdef gdds='git'
  compdef gdh='git'
  compdef gdl='git'
fi

if [[ -n "$(command -v docker)" && -r "${ZSH_SITE_FUNCTIONS}/_docker" ]]; then
  compdef dk='docker'
fi

if [[ -n "$(command -v docker-compose)" && -r "${ZSH_SITE_FUNCTIONS}/_docker" ]]; then
  compdef dc='docker-compose'
fi

if [[ -n "$(command -v kubectl)" && -r "${ZSH_SITE_FUNCTIONS}/_kubectl" ]]; then
  compdef kc='kubectl'
fi

if [[ -n "$(command -v kubectx)" && -r "${ZSH_SITE_FUNCTIONS}/_kubectx" ]]; then
  compdef kx='kubectx'
fi

if [[ -n "$(command -v watson)" && -n "$(command -v _watson)" ]]; then
  compdef ww='watson'
  compdef wag='watson'
fi

# ALT-F - Custom FZF key-binding that pastes the selected directories into the
# command line.
#
# <https://github.com/junegunn/fzf/blob/master/shell/key-bindings.zsh>
# <https://github.com/junegunn/fzf/wiki/Examples#changing-directory>
#
__be_dsel() {
  local cmd="${FZF_ALT_F_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type d -print \
    2> /dev/null | cut -b3-"}"
  setopt localoptions pipefail no_aliases 2> /dev/null
  local item
  eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" $(__be_fzfcmd) -m "$@" | while read item; do
    echo -n "${(q)item} "
  done
  local ret=$?
  echo
  return $ret
}

__be_fzfcmd() {
  [ -n "$TMUX_PANE" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "$FZF_TMUX_OPTS" ]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}

be-fzf-dir-widget() {
  LBUFFER="${LBUFFER}$(__be_dsel)"
  local ret=$?
  zle reset-prompt
  return $ret
}

zle -N be-fzf-dir-widget # register the widget

# Map Alt+F
# if [[ "$(uname -s)" == "Darwin" ]]; then
  bindkey 'Æ’' be-fzf-dir-widget
# else
  bindkey '\ef' be-fzf-dir-widget
# fi

# taken from oh-my-zsh
# macOS's $HOST changes with dhcp, etc. Use ComputerName if possible.
function _bravoecho_hostname() {
  local short_host=
  if [[ "$OSTYPE" = darwin* ]]; then
    short_host=$(scutil --get ComputerName 2>/dev/null) || short_host=${HOST/.*/}
  else
    short_host=${HOST/.*/}
  fi

  echo $short_host
}

[[ -n "${COMPUTER_NAME}" ]] || export COMPUTER_NAME="$(_bravoecho_hostname)"

_be_command_time_preexec() {
  setopt local_options BASH_REMATCH

  # reset the time message
  # The time info needs to be exported to be available in the zsh prompt.
  export COMMAND_TIME_PROMPT=""

  # Skip the commands specified in the dedicated env var.
  # Account for aliases, only consider the actual command.
  # (TODO: needs to account for inline env vars)
  # (TODO: needs to account for sudo)
  if [ -n "$BE_ZSH_COMMAND_TIME_EXCLUDE" ]; then
    local cmd="$1"
    cmd=$(echo "${cmd}" | grep -Eo '^[^[:blank:]|]+')

    regex="^alias\ .+='([^[:blank:]|]+)"
    if [[ $(command -v "${cmd}") =~ $regex ]]; then
      cmd="${BASH_REMATCH[2]}"
    fi

    for exc ($BE_ZSH_COMMAND_TIME_EXCLUDE) do;
      if [ "$(echo "${cmd}" | grep -Ec "^$exc\b")" -gt 0 ]; then
        return
      fi
    done
  fi

  # in zsh the SECONDS env var contains the number of seconds since the shell
  # was started
  #
  # (global variable for cross-function communication)
  timer=${timer:-$SECONDS}
}

_be_command_time_precmd() {
  # nothing to do if the timer global is not set
  if [[ -z "${timer+x}" ]]; then
    # ensure the time is only printed once
    unset COMMAND_TIME_PROMPT
    return
  fi

  # [[ -n "${timer+x}" ]] || return
  [[ -n "$TTY" ]] || return

  local elapsed_secs=$(($SECONDS - $timer))
  unset timer

  [[ $elapsed_secs -ge ${BE_ZSH_COMMAND_TIME_MIN_SECONDS:-3} ]] || return

  local elapsed_fmt=
  local hours=$(($elapsed_secs/3600))
  local minutes=$(($elapsed_secs%3600/60))
  local seconds=$(($elapsed_secs%60))

  if [[ $hours -gt 0 ]]; then
    elapsed_fmt=$(printf '%dh:%02dm:%02ds' ${hours} ${minutes} ${seconds})
  elif [[ $minutes -gt 0 ]]; then
    elapsed_fmt=$(printf '%dm:%02ds' ${minutes} ${seconds})
  else
    elapsed_fmt=$(printf '%d seconds' ${seconds})
  fi

  # The time info needs to be exported to be available in the zsh prompt.
  export COMMAND_TIME_PROMPT="[%Btime ${elapsed_fmt}%b]"$'\n'
}

precmd_functions+=(_be_command_time_precmd)
preexec_functions+=(_be_command_time_preexec)

# Switch to an allow-list instead of an exclude-list.
BE_ZSH_COMMAND_TIME_EXCLUDE=(
  "bat"
  "cat"
  "git"
  "less"
  "man"
  "reflex"
  "ssh"
  "tmux"
  "vim"
  "gch"
  "irb"
  "pry"
  "sqlite3"
  "fg"
  "n"
  "lf"
  "du"
  "watch"
  "watson"
  "gdu"
  "gotop"
  "tig"
)
# declare -A BE_ZSH_COMMAND_TIME_EXCLUDE
# BE_ZSH_COMMAND_TIME_EXCLUDE["vim"]=true
# BE_ZSH_COMMAND_TIME_EXCLUDE["docker"]=true

# Custom prompt, depends on oh-my-zsh:
#
#   * print exit code if non-zero
#   * current path
#   * current git branch if it's in a repo
#   * git status
#   * puts the cursor into a new line
#
setopt PROMPT_SUBST # evaluate the shell expressions on every prompt
prompt_newline=$'\n'
if [[ "$TERM" != "dumb" ]] && [[ "$DISABLE_LS_COLORS" != "true" ]]; then
  # %~ = pwd with tilde
  # print warning and exit code if the previous command failed
  PROMPT='%(?..[%B%F{red}exit code: %?%f%b]${prompt_newline})${COMMAND_TIME_PROMPT}[%F{blue}%~%f$(_parse_git_status)]${prompt_newline}%# '
  # PROMPT='${COMMAND_TIME_PROMPT}[%F{blue}%~%f$(_parse_git_status)]${prompt_newline}%# '
else
  PROMPT='[%n@%m:%~]${prompt_newline}%# '
fi

# ----------- #
# --- FZF --- #
# ----------- #

# fzf widgets should be loaded as last, to ensure they are not overridden by
# native shell functionality
[[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh

# ----------- #
# --- NVM --- #
# ----------- #

# SLOW: nvm init takes more than 700 ms. Use alias when needed.
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
alias _init_nvm='[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"'

#------------#
#--- JUMP ---#
#------------#

# [ -n "$(command -v jump)" ] && eval "$(jump shell zsh)"

# -------------- #
# --- ZOXIDE --- #
# -------------- #

[ -n "$(command -v zoxide)" ] && eval "$(zoxide init zsh)"

# -------------------- #
# --- Key bindings --- #
# -------------------- #

# Use emacs keybindings; the full list can be seen with the command:
# 'bindkey -M emacs'.
#
# Disable "history search" with arrow up/down (https://superuser.com/a/1494820)
# in particular is already set in emacs mode.
#
# Unfortunately there are still many things that don't work out of the box as
# they do in bash, so oh-my-zsh provides a large number of fixes:
# <https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/079e7bb5e0a79171f3356d55d3f6302a82645a39/lib/key-bindings.zsh>
#
# Here we attempt a more primitive solution, but in the long run it might just
# make more sense to bring that file in.
bindkey -e

# Some Mac specific keybinding fixes
# if [[ "$(uname -s)" == "Darwin" ]]; then
  bindkey "Ã§" fzf-cd-widget # Alt-C (Option-C)
  bindkey 'âˆ‚' kill-word # Alt-D
# fi

# provided by ohmyzsh for now
# # ctrl arrow left/right: move by one word
# # note: this works for the xterm family of terminal emulators, including tmux
# bindkey '[1;5C' forward-word
# bindkey '[1;5D' backward-word

# emulate bash, cut to beginning of line with Ctrl+U instead of cutting the
# whole line.
bindkey \^U backward-kill-line

# -------------------------------------- #
# --- Additional shell configuration --- #
# -------------------------------------- #

[[ -e "${HOME}/.shell_addons" ]] && source ~/.shell_addons
[[ -e "${HOME}/.shell_addons_local" ]] && source ~/.shell_addons_local

# Remove duplicates from various PATHs
# https://til.hashrocket.com/posts/7evpdebn7g-remove-duplicates-in-zsh-path
typeset -aU path
typeset -aU manpath
typeset -aU infopath

# the direnv hook must be at the end of the rc file
[[ -n "$(command -v direnv)" ]] && eval "$(direnv hook zsh)"

# Assuming it was installed with Homebrew
ZSH_HIGHLIGHT_SOURCE=$HOMEBREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
[[ -e $ZSH_HIGHLIGHT_SOURCE ]] && source $ZSH_HIGHLIGHT_SOURCE
# uncomment if receiving error "highlighters directory not found"
# export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=$HOMEBREW_PREFIX/share/zsh-syntax-highlighting/highlighters
