#!/usr/bin/env zsh

set -e

# --------------------------------------------------------------------------- #
# --- Detect the operating system ------------------------------------------- #
# --------------------------------------------------------------------------- #

PLATFORM=
if [[ "$(uname -s)" =~ Darwin ]]; then
  PLATFORM='darwin'
elif [[ "$(uname -s)" =~ Linux ]]; then
  PLATFORM='linux'
else
  echo "Unsupported platform: $(uname -s)"
  exit 1
fi

# --------------------------------------------------------------------------- #
# --- Detect processor architecture ----------------------------------------- #
# --------------------------------------------------------------------------- #

ARCH=
if [[ "$(uname -m)" == "x86_64" ]]; then
  ARCH='amd64'
elif [[ "$(uname -m)" == "arm64" ]]; then
  ARCH='arm64'
else
  echo "Unsupported architecture: $(uname -m)"
  exit 1
fi

# --------------------------------------------------------------------------- #
# --- Parse params ---------------------------------------------------------- #
# --------------------------------------------------------------------------- #

PARAMS=""
LOCAL_INSTALL=
while [[ "$#" != "0" ]]; do
  case "$1" in
    -l|--local)
      LOCAL_INSTALL="true"
      shift
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unknown flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"

# --------------------------------------------------------------------------- #
# --- Go version (given or latest) ------------------------------------------ #
# --------------------------------------------------------------------------- #

GO_VERSION=$1

# If no version was specified use the latest available
if [[ -z "$GO_VERSION" ]]; then
  # The Golang project does not use github releases properly (2021-05-14).
  # The most reliable way is currently to parse the official Golang downloads page.
  GO_VERSION=$(
    curl -gsL golang.org/dl \
      | grep -m1 "${PLATFORM}-${ARCH}.tar.gz" \
      | sed -E "s|.*\"/dl/go(.+)\.${PLATFORM}-${ARCH}.tar.gz\".+|\1|"
  )
fi

# --------------------------------------------------------------------------- #
# --- Finalise config ------------------------------------------------------- #
# --------------------------------------------------------------------------- #

CURRDIR="$(cd "$(dirname "$([ -L "${0}" ] && readlink "${0}" || echo "${0}")")" && pwd -P)"

GO_ROOT=
if [[ -n "${LOCAL_INSTALL}" ]]; then
  GO_ROOT="${HOME}/.go/${GO_VERSION}"
else
  GO_ROOT="/usr/local/go"
fi
DOWNLOAD_DIR="${HOME}/Downloads"
FILENAME="go${GO_VERSION}.${PLATFORM}-${ARCH}.tar.gz"
ARCHIVE_FILE="${DOWNLOAD_DIR}/${FILENAME}"
# URL="https://storage.googleapis.com/golang/${FILENAME}"
URL="https://golang.org/dl/${FILENAME}"

echo "PLATFORM      ${PLATFORM}"
echo "GO_VERSION    ${GO_VERSION}"
echo "GO_ROOT       ${GO_ROOT}"
echo "FILENAME      ${FILENAME}"
echo "DOWNLOAD_DIR  ${DOWNLOAD_DIR}"
echo "ARCHIVE_FILE  ${ARCHIVE_FILE}"
echo "URL           ${URL}"
echo "LOCAL_INSTALL ${LOCAL_INSTALL}"

source "${CURRDIR}/utils.sh"

# --------------------------------------------------------------------------- #
# --- Perform installation -------------------------------------------------- #
# --------------------------------------------------------------------------- #

echo "Downloading ${URL}"
curl \
  "${URL}" \
  --location \
  --create-dirs \
  --time-cond "${ARCHIVE_FILE}" \
  --fail-with-body \
  --output "${ARCHIVE_FILE}"

echo "Remove old installation (dir ${GO_ROOT})"
if [[ -z "${LOCAL_INSTALL}" ]]; then
  echo "Running command with sudo to remove previous global installation"
  sudo \rm -rf "${GO_ROOT}"
else
  \rm -rf "${GO_ROOT}"
fi

echo "Extract ${ARCHIVE_FILE} -> ${GO_ROOT}"
if [[ -z "${LOCAL_INSTALL}" ]]; then
  echo "Running command with sudo to perform global installation"
  sudo mkdir -p "${GO_ROOT}"
  sudo tar --directory "${GO_ROOT}" --strip-components=1 -xzf "${ARCHIVE_FILE}"
else
  mkdir -p "${GO_ROOT}"
  tar --directory "${GO_ROOT}" --strip-components=1 -xzf "${ARCHIVE_FILE}"
fi

echo "Checking installation: $($GO_ROOT/bin/go version) installed at $GO_ROOT/bin/go"

# --------------------------------------------------------------------------- #
# --- Install support features ---------------------------------------------- #
# --------------------------------------------------------------------------- #

"${CURRDIR}/golang-zsh-completion"

if [[ -z "${LOCAL_INSTALL}" ]]; then
  export PATH="$GO_ROOT/bin:$PATH"

  "${CURRDIR}/golang-packages"
fi
