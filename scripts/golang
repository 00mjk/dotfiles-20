#!/usr/bin/env bash

set -e

# --------------------------------------------------------------------------- #
# --- Detect operating system type ------------------------------------------ #
# --------------------------------------------------------------------------- #

OS_NAME=$(uname -s)
GO_PLATFORM=$( [[ $OS_NAME =~ (Darwin|Linux) ]] && echo $OS_NAME | tr '[[:upper:]]' '[[:lower:]]' )
[[ -z "${GO_PLATFORM}" ]] && echo "${OS_NAME} not supported" && exit 1

OS_ARCH="$(uname -m)"
GO_ARCH=$( [[ $OS_ARCH = "x86_64" ]] && echo "amd64" || ( [[ $OS_ARCH =~ (arm64|aarch64) ]] && echo "arm64" ) )
[[ -z "${GO_ARCH}" ]] && echo "${OS_ARCH} not supported" && exit 1

# --------------------------------------------------------------------------- #
# --- Parse params ---------------------------------------------------------- #
# --------------------------------------------------------------------------- #

PARAMS=""
TRUE=true
LOCAL_INSTALL="false"
SET_DEFAULT="false"
while [[ "$#" != "0" ]]; do
  case "$1" in
    -l|--local)
      LOCAL_INSTALL="$TRUE"
      shift
      ;;
    -d|--default)
      SET_DEFAULT="$TRUE"
      shift
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unknown flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"

if [[ "${SET_DEFAULT}" == "$TRUE" && "${LOCAL_INSTALL}" != "$TRUE" ]]; then
  >&2 echo "'--default' can only be used when '--local' is set"
  exit 1
fi

# --------------------------------------------------------------------------- #
# --- Go version (given or latest) ------------------------------------------ #
# --------------------------------------------------------------------------- #

GO_VERSION=$1

# If no version was specified use the latest available
if [[ -z "$GO_VERSION" ]]; then
  # The Golang project does not use github releases properly (2021-05-14).
  # The most reliable way is currently to parse the official Golang downloads page.
  GO_VERSION=$(
    curl -gsL golang.org/dl \
      | grep -m1 "${GO_PLATFORM}-${GO_ARCH}.tar.gz" \
      | sed -E "s|.*\"/dl/go(.+)\.${GO_PLATFORM}-${GO_ARCH}.tar.gz\".+|\1|"
  )
fi

# --------------------------------------------------------------------------- #
# --- Finalise config ------------------------------------------------------- #
# --------------------------------------------------------------------------- #

CURRDIR="$(cd "$(dirname "$([ -L "${0}" ] && readlink "${0}" || echo "${0}")")" && pwd -P)"

GO_ROOT=
if [[ "${LOCAL_INSTALL}" == "$TRUE" ]]; then
  GO_ROOT="${HOME}/.go/${GO_VERSION}"
else
  GO_ROOT="/usr/local/go"
fi
DOWNLOAD_DIR="${HOME}/Downloads"
FILENAME="go${GO_VERSION}.${GO_PLATFORM}-${GO_ARCH}.tar.gz"
ARCHIVE_FILE="${DOWNLOAD_DIR}/${FILENAME}"
URL="https://golang.org/dl/${FILENAME}"

cat <<-EOF
OS_NAME ........ ${OS_NAME}
GO_PLATFORM .... ${GO_PLATFORM}
OS_ARCH ........ ${OS_ARCH}
GO_ARCH ........ ${GO_ARCH}
GO_VERSION ..... ${GO_VERSION}
GO_ROOT ........ ${GO_ROOT}
FILENAME ....... ${FILENAME}
DOWNLOAD_DIR ... ${DOWNLOAD_DIR}
ARCHIVE_FILE ... ${ARCHIVE_FILE}
URL ............ ${URL}
LOCAL_INSTALL .. ${LOCAL_INSTALL}
EOF

# --------------------------------------------------------------------------- #
# --- Check installed ------------------------------------------------------- #
# --------------------------------------------------------------------------- #

ALREDY_INSTALLED_MSG="
Desired version is already installed at ${GO_ROOT}, nothing to do
"

if [[ "${LOCAL_INSTALL}" == "true" &&  -d "${GO_ROOT}" ]]; then
  echo "${ALREDY_INSTALLED_MSG}"
  exit 0
fi

if test -x $GO_ROOT/bin/go && $GO_ROOT/bin/go version | grep -w "go${GO_VERSION}"; then
  echo "${ALREDY_INSTALLED_MSG}"
  exit 0
fi

# --------------------------------------------------------------------------- #
# --- Perform installation -------------------------------------------------- #
# --------------------------------------------------------------------------- #

echo "Downloading ${URL}"
curl \
  "${URL}" \
  --location \
  --create-dirs \
  --time-cond "${ARCHIVE_FILE}" \
  --fail-with-body \
  --output "${ARCHIVE_FILE}"

# Remove old installation only if it's a global install. Local installs would
# not reach this point, the scripts exits above if a folder for the local
# version is already present.
if [[ ! "${LOCAL_INSTALL}" == "true" ]]; then
  echo "Running command with sudo to remove previous global installation"
  sudo \rm -rf "${GO_ROOT}"
fi

echo "Extract ${ARCHIVE_FILE} -> ${GO_ROOT}"
if [[ "${LOCAL_INSTALL}" == "true" ]]; then
  mkdir -p "${GO_ROOT}"
  tar --directory "${GO_ROOT}" --strip-components=1 -xzf "${ARCHIVE_FILE}"
else
  echo "Running command with sudo to perform global installation"
  sudo mkdir -p "${GO_ROOT}"
  sudo tar --directory "${GO_ROOT}" --strip-components=1 -xzf "${ARCHIVE_FILE}"
fi

\rm -v "${ARCHIVE_FILE}"

if [[ "${LOCAL_INSTALL}" == "true" && "${SET_DEFAULT}" == "true" ]]; then
  ln --symbolic --verbose --force --relative "${GO_ROOT}" "${HOME}/.go/default"
fi

echo "Checking installation: $($GO_ROOT/bin/go version) installed at $GO_ROOT/bin/go"
