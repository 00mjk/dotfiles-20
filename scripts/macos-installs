#!/usr/bin/env zsh

set -eu
set -o pipefail

if [[ ! "$(uname -s)" =~ Darwin ]]; then
  echo "Only needed on macOS, all done"
  exit 0
fi

set +e
echo "[setup] Install Command Line Tools for Xcode if not already present"
xcode-select --install 2>&1
set -e

CURRDIR="$(cd "$(dirname "$([ -L "${0}" ] && readlink "${0}" || echo "${0}")")" && pwd -P)"
source "${CURRDIR}/utils.sh"

# native uname only supports -m, not the long format --machine
BREW_PREFIX=
if [[ "$(uname -m)" == "x86_64" ]]; then
  BREW_PREFIX='/usr/local'
elif [[ "$(uname -m)" == "arm64" ]]; then
  BREW_PREFIX='/opt/homebrew'
else
  echo "Unsupported architecture: $(uname -m)"
  exit 1
fi

echo "[setup] Install Homebrew if not already present"
if [[ ! -x "${BREW_PREFIX}/bin/brew" ]]; then
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

export PATH="$BREW_PREFIX/bin:$PATH"

# ---------------- #
# --- Formulae --- #
# ---------------- #

# NOTE: docker is installed as cask (desktop app), because even if a docker
# formulae exists, that requires VirtualBox.

echo "[setup] Install GNU utilities"
brew install --quiet --formulae \
  coreutils \
  diffutils \
  findutils \
  gawk \
  gnu-getopt \
  gnu-indent \
  gnu-sed \
  gnu-tar \
  gnu-time \
  gnu-which \
  gpatch \
  grep \
  gzip \
  inetutils

echo "[setup] Install recent versions of macOS built-in utilities"
brew install --quiet --formulae \
  bash \
  curl \
  git \
  tidy-html5 \
  less \
  libxml2 \
  make \
  nano \
  openssh \
  perl \
  python \
  rsync \
  sqlite \
  zsh

echo "[setup] Install extra utilities"
brew install --quiet --formulae \
  bat \
  cloc \
  direnv \
  exa \
  fd \
  ffmpeg \
  fzf \
  git-delta \
  golangci/tap/golangci-lint \
  htop \
  httpie \
  imagemagick \
  jq \
  jump \
  lf \
  lsof \
  mosh \
  mtr \
  nmap \
  nnn \
  parallel \
  pigz \
  pipx \
  plantuml \
  pre-commit \
  ripgrep \
  ruby \
  ruby-install \
  tmux \
  tree \
  vim \
  watch \
  watson \
  wdiff \
  wget \
  yq

echo "[setup] Install Node.js"
brew install --quiet --formulae \
  node \
  yarn

# universal-ctags is a head-only formula until considered stable
brew install --quiet --formulae \
  --HEAD \
  universal-ctags/universal-ctags/universal-ctags

# --------------------------------- #
# --- Post install for formulae --- #
# --------------------------------- #

# echo "[setup] Python post-install setup"
# brew link --overwrite --force python@3.9

echo "[setup] FZF post-install setup"
$BREW_PREFIX/opt/fzf/install --key-bindings --completion --no-update-rc

if [[ ! $SHELL == "$BREW_PREFIX/bin/zsh" ]]; then
  echo "[setup] Brew-installed shells post-install setup"
  append_if_missing /etc/shells "$BREW_PREFIX/bin/bash"
  append_if_missing /etc/shells "$BREW_PREFIX/bin/zsh"

  chsh -s $BREW_PREFIX/bin/zsh
fi

echo "[setup] Install dotfiles"
"${CURRDIR}/dotfiles"

echo "[setup] Install Vim configuration"
"${CURRDIR}/vim"

echo "[setup] Install Oh My Zsh"
"$CURRDIR/ohmyzsh"

# ------------- #
# --- Casks --- #
# ------------- #

echo "[setup] Install Apps and Fonts as Casks"
brew tap homebrew/cask-fonts

brew install --quiet --casks \
  authy \
  docker \
  drawio \
  firefox \
  font-inconsolata \
  font-inconsolata-nerd-font \
  font-jetbrains-mono \
  font-jetbrains-mono-nerd-font \
  font-juliamono \
  google-chrome \
  google-drive \
  istat-menus \
  iterm2 \
  middle \
  pastebot \
  rectangle \
  visual-studio-code \
  vlc \
  zoom

echo "[setup] Ensure local ~/Applications is available only to this user"
chmod 0700 ~/Applications

# ------------------------------ #
# --- Post install for casks --- #
# ------------------------------ #

# TODO: Link Chrome Dictionary to Dropbox
# $HOME/Library/Application\ Support/Google/Chrome/Default/Custom\ Dictionary.txt

echo "[setup] Install some of the iTerm2 utilities"
"${CURRDIR}/iterm2-utils"

# Middle.app <https://middleclick.app/> only allows to choose one option (click
# or tap) for each device.
#
# By writing the options directly it's possible to have both click and tap
# working for the same device (trick shared by author of the app.)
defaults write com.knollsoft.Middle trackpadThreeClick -bool true
defaults write com.knollsoft.Middle trackpadThreeTap -bool true

# ------------------------------- #
# --- Other non-brew installs --- #
# ------------------------------- #

echo "[setup] Install Golang"
"${CURRDIR}/golang"

echo "[setup] Install Rust"
"${CURRDIR}/rust"

# echo "[setup] Install pipx packages"
#
pipx ensurepath
# pipx install --force litecli
# pipx install --force glances
# pipx install --force ydiff

# pipx install --force pgcli
# Fatal error from pip prevented installation. Full pip output in file:
#     ~/.local/pipx/logs/cmd_2021-05-31_11.58.22_pip_errors.log
#
# pip seemed to fail to build package:
#     pgcli
#
# Some possibly relevant errors from pip install:
#     Error: pg_config executable not found.
#     ERROR: Cannot install pgcli==0.15.4, pgcli==0.16.0, pgcli==0.16.1, pgcli==0.16.2, pgcli==0.16.3, pgcli==0.17.0, pgcli==0.18.0, pgcli==0.19.0, pgcli==0.19.1, pgcli==0.19.2, pgcli==0.20.0, pgcli==0.20.1, pgcli==1.0.0, pgcli==1.1.0, pgcli==1.10.0, pgcli==1.10.1, pgcli==1.10.2, pgcli==1.10.3, pgcli==1.11.0, pgcli==1.2.0, pgcli==1.3.0, pgcli==1.3.1, pgcli==1.4.0, pgcli==1.5.0, pgcli==1.5.1, pgcli==1.6.0, pgcli==1.7.0, pgcli==1.8.0, pgcli==1.8.1, pgcli==1.8.2, pgcli==1.9.0, pgcli==1.9.1, pgcli==2.0.0, pgcli==2.0.1, pgcli==2.0.2, pgcli==2.1.0, pgcli==2.1.1, pgcli==2.2.0, pgcli==3.0.0 and pgcli==3.1.0 because these package versions have conflicting dependencies.
#     ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/user_guide/#fixing-conflicting-dependencies
#
# Error installing pgcli.

# ---------------------------------------------------- #
# --- Fix source code files appearing in Spotlight --- #
# ---------------------------------------------------- #

# See https://www.howtogeek.com/231829/how-to-disable-developer-search-results-in-spotlight-on-a-mac/

echo "[setup] Fix Spotlight bug not showing the 'Developer' option"
touch /Applications/Xcode.app

# ------------------ #
# --- Next steps --- #
# ------------------ #

echo "

-------------
--- NOTES ---
-------------

* Many packages installed depend on the shell configuration provided.
  Run './scripts/dotfiles' to install it.

* More GNU utilities to consider:

  - autoconf
  - binutils
  - ed
  - emacs
  - flex
  - gdb
  - gnu-units
  - m4
  - screen
  - util-linux
  - awscli
  - amazon-ecs-cli
  - git-remote-codecommit
  - terraform

* More packages:
  - bmon
  - cmark
  - colordiff
  - fff
  - figlet
  - glow
  - gnupg
  - graphviz
  - just
  - kubectx
  - lazygit
  - libpq
  - lolcat (requires Ruby)
  - mdcat
  - nethogs
  - nload
  - pyenv
  - ranger
  - rbenv
  - ruby-build
  - slurm
  - terraform
  - the_silver_searcher
  - tig
  - trash
  - timewarrior (time tracking)
  - timetrap (to be installed as a Ruby gem, no brew package)

* Other casks:

  - alacritty
  - calibre
  - dash
  - dash
  - devdocs
  - devdocs
  - font-dejavu
  - font-dejavu-sans-mono-nerd-font
  - font-go
  - google-backup-and-sync
  - google-drive-file-stream (for Google Workspace accounts, supports Shared Drives)
  - homebrew/cask-drivers/logitech-camera-settings
  - homebrew/cask/menubar-stats
  - homebrew/cask/stats
  - istat-menus
  - istat-menus
  - libreoffice
  - mdrp
  - menubar-stats
  - menumeters
  - onedrive
  - postman
  - signal
  - stats
  - telegram
  - the-unarchiver
  - thunderbird
  - tunnelbear
  - vagrant
  - virtualbox
  - virtualbox-extension-pack
  - whatsapp

* Casks requiring Rosetta 2 on arm64
  - adoptopenjdk
  - microsoft-teams
  - sdformatter
  - bitwarden (including the Safari extension)
  - authy
  - dropbox

* Open Spotlight preferences to disable 'Developer' results (source code files)

"
