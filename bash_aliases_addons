# vim: set ft=sh:

# -----------
# --- git ---
# -----------

alias g='git'
alias ga='git add'
alias gaa='git add $(git rev-parse --show-toplevel)'
alias gap='git add $(git rev-parse --show-toplevel) -p'
alias gb='git branch'
alias gba='git branch --all'
alias gci='git commit'
alias gcim='git commit -m'
alias gco='git checkout'
alias gcl='git checkout -' # "git checkout 'last'"
alias gd='git diff'
alias gds='git diff --staged'
alias gf='git fetch'
alias gp='git pull'
alias gpl='git pull'
alias gpp='git push origin HEAD -u'
alias gps='git push origin HEAD -u'
alias gs='git status -sb'
alias gst='git status -sb'
alias gsm='git submodule update --init --recursive'
alias gsd='git diff --staged'

# Clean up all the branches that have been merged into master,
# both locally and remotely.
#
# Note: if a branch has been rebased either locally or remotely, it won't be
#       removed, and it will have to be delete manually and forcibly.
gdel() {
  # Make sure that master is clean.
  git checkout master
  git pull origin master

  # --prune: After fetching, remove any remote-tracking references that no longer exist on the remote.
  git fetch --prune

  # remove local branches that have gone remotes (http://stackoverflow.com/a/33548037)
  # - show the local branches, including more information about the corresponding remote
  # - keep only the relevant columns (local branch name and remote info)
  # - filter the ones that are "gone" in the remote
  # - keep only the local branch name
  # - loop and force-delete the resulting branches
  for branch in `git branch -vv | awk '{print $1,$4}'  | grep ': gone]' | awk '{print $1}'`; do
    git branch -D $branch
  done

  # Delete all the remote branches that have already been merged into master,
  # excluding master itself.
  git branch --no-color --remote --merged origin/master \
    | cut -c3-  \
    | grep -vE '^(origin/master|origin/HEAD)\b' \
    | while read x; do
        git push --delete origin "${x#origin/}" # strip the origin/ prefix
      done

  # Same but with the local branches.
  git branch --list --no-color \
		| cut -c3-  \
    | grep -vE '^master$' \
    | while read x; do
        git branch -d "${x}"
      done

  # Remove "origin" branches that are not in the remote origin
  git remote prune origin

  # Garbage-collect all the objects that are no longer referenced
  git prune

  # Go back to the original branch
  git checkout -
}

# ----------
# --- ls ---
# ----------

alias ls='ls -Ga'

# ---------------
# --- bundler ---
# ---------------

alias be='bundle exec'

# --------------
# --- docker ---
# --------------

alias d='docker'
alias dk='docker'
alias dc='docker-compose'
alias rmimages='docker rmi $(docker images -a -q)'
alias rmcontainers='docker rm $(docker ps -a -f status=exited -q)'
